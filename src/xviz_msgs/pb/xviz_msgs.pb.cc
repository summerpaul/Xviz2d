// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xviz_msgs.proto

#include "xviz_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xviz_msgs {
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frameid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Vector2f::Vector2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_CONSTEXPR Pose2f::Pose2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Pose2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pose2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pose2fDefaultTypeInternal() {}
  union {
    Pose2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pose2fDefaultTypeInternal _Pose2f_default_instance_;
PROTOBUF_CONSTEXPR Pose2fArray::Pose2fArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posearray_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Pose2fArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pose2fArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pose2fArrayDefaultTypeInternal() {}
  union {
    Pose2fArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pose2fArrayDefaultTypeInternal _Pose2fArray_default_instance_;
PROTOBUF_CONSTEXPR Polygon2f::Polygon2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.filled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Polygon2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Polygon2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Polygon2fDefaultTypeInternal() {}
  union {
    Polygon2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Polygon2fDefaultTypeInternal _Polygon2f_default_instance_;
PROTOBUF_CONSTEXPR Polygon2fArray::Polygon2fArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.polygonarray_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Polygon2fArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Polygon2fArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Polygon2fArrayDefaultTypeInternal() {}
  union {
    Polygon2fArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Polygon2fArrayDefaultTypeInternal _Polygon2fArray_default_instance_;
PROTOBUF_CONSTEXPR Path2f::Path2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.isdashed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Path2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Path2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Path2fDefaultTypeInternal() {}
  union {
    Path2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Path2fDefaultTypeInternal _Path2f_default_instance_;
PROTOBUF_CONSTEXPR Path2fArray::Path2fArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.patharray_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Path2fArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Path2fArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Path2fArrayDefaultTypeInternal() {}
  union {
    Path2fArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Path2fArrayDefaultTypeInternal _Path2fArray_default_instance_;
PROTOBUF_CONSTEXPR Circle2f::Circle2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.raduis_)*/0
  , /*decltype(_impl_.filled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Circle2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Circle2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Circle2fDefaultTypeInternal() {}
  union {
    Circle2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Circle2fDefaultTypeInternal _Circle2f_default_instance_;
PROTOBUF_CONSTEXPR Circle2fArray::Circle2fArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.circlearray_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Circle2fArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Circle2fArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Circle2fArrayDefaultTypeInternal() {}
  union {
    Circle2fArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Circle2fArrayDefaultTypeInternal _Circle2fArray_default_instance_;
PROTOBUF_CONSTEXPR PointCloud2f::PointCloud2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointCloud2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloud2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloud2fDefaultTypeInternal() {}
  union {
    PointCloud2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloud2fDefaultTypeInternal _PointCloud2f_default_instance_;
PROTOBUF_CONSTEXPR Marker2f::Marker2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.polygon_)*/nullptr
  , /*decltype(_impl_.cirlce_)*/nullptr
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.point_cloud_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.colortype_)*/0u
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Marker2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Marker2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Marker2fDefaultTypeInternal() {}
  union {
    Marker2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Marker2fDefaultTypeInternal _Marker2f_default_instance_;
PROTOBUF_CONSTEXPR Marker2fArray::Marker2fArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.markerarray_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Marker2fArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Marker2fArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Marker2fArrayDefaultTypeInternal() {}
  union {
    Marker2fArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Marker2fArrayDefaultTypeInternal _Marker2fArray_default_instance_;
PROTOBUF_CONSTEXPR Transform2fNode::Transform2fNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frameid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentframeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trans_)*/nullptr
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Transform2fNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transform2fNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transform2fNodeDefaultTypeInternal() {}
  union {
    Transform2fNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transform2fNodeDefaultTypeInternal _Transform2fNode_default_instance_;
PROTOBUF_CONSTEXPR MapDouble_DataEntry_DoNotUse::MapDouble_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MapDouble_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDouble_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDouble_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapDouble_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDouble_DataEntry_DoNotUseDefaultTypeInternal _MapDouble_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapDouble::MapDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDoubleDefaultTypeInternal() {}
  union {
    MapDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDoubleDefaultTypeInternal _MapDouble_default_instance_;
PROTOBUF_CONSTEXPR MapString_DataEntry_DoNotUse::MapString_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MapString_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapString_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapString_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapString_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapString_DataEntry_DoNotUseDefaultTypeInternal _MapString_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapString::MapString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapStringDefaultTypeInternal() {}
  union {
    MapString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapStringDefaultTypeInternal _MapString_default_instance_;
}  // namespace xviz_msgs
static ::_pb::Metadata file_level_metadata_xviz_5fmsgs_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_xviz_5fmsgs_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xviz_5fmsgs_2eproto = nullptr;

const uint32_t TableStruct_xviz_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Header, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Header, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Header, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Vector2f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Vector2f, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2f, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2f, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2f, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2fArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2fArray, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Pose2fArray, _impl_.posearray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2f, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2f, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2f, _impl_.filled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2fArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2fArray, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Polygon2fArray, _impl_.polygonarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2f, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2f, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2f, _impl_.isdashed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2fArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2fArray, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Path2fArray, _impl_.patharray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2f, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2f, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2f, _impl_.raduis_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2f, _impl_.filled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2fArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2fArray, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Circle2fArray, _impl_.circlearray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::PointCloud2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::PointCloud2f, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::PointCloud2f, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.cirlce_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.point_cloud_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.colortype_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.thickness_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2f, _impl_.radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2fArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2fArray, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Marker2fArray, _impl_.markerarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Transform2fNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Transform2fNode, _impl_.trans_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Transform2fNode, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Transform2fNode, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::Transform2fNode, _impl_.parentframeid_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapDouble_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapDouble_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapDouble_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapDouble_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapDouble, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapString_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapString_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapString_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapString_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz_msgs::MapString, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xviz_msgs::Header)},
  { 9, -1, -1, sizeof(::xviz_msgs::Vector2f)},
  { 17, -1, -1, sizeof(::xviz_msgs::Pose2f)},
  { 26, -1, -1, sizeof(::xviz_msgs::Pose2fArray)},
  { 34, -1, -1, sizeof(::xviz_msgs::Polygon2f)},
  { 43, -1, -1, sizeof(::xviz_msgs::Polygon2fArray)},
  { 51, -1, -1, sizeof(::xviz_msgs::Path2f)},
  { 60, -1, -1, sizeof(::xviz_msgs::Path2fArray)},
  { 68, -1, -1, sizeof(::xviz_msgs::Circle2f)},
  { 78, -1, -1, sizeof(::xviz_msgs::Circle2fArray)},
  { 86, -1, -1, sizeof(::xviz_msgs::PointCloud2f)},
  { 94, -1, -1, sizeof(::xviz_msgs::Marker2f)},
  { 112, -1, -1, sizeof(::xviz_msgs::Marker2fArray)},
  { 120, -1, -1, sizeof(::xviz_msgs::Transform2fNode)},
  { 130, 138, -1, sizeof(::xviz_msgs::MapDouble_DataEntry_DoNotUse)},
  { 140, -1, -1, sizeof(::xviz_msgs::MapDouble)},
  { 147, 155, -1, sizeof(::xviz_msgs::MapString_DataEntry_DoNotUse)},
  { 157, -1, -1, sizeof(::xviz_msgs::MapString)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xviz_msgs::_Header_default_instance_._instance,
  &::xviz_msgs::_Vector2f_default_instance_._instance,
  &::xviz_msgs::_Pose2f_default_instance_._instance,
  &::xviz_msgs::_Pose2fArray_default_instance_._instance,
  &::xviz_msgs::_Polygon2f_default_instance_._instance,
  &::xviz_msgs::_Polygon2fArray_default_instance_._instance,
  &::xviz_msgs::_Path2f_default_instance_._instance,
  &::xviz_msgs::_Path2fArray_default_instance_._instance,
  &::xviz_msgs::_Circle2f_default_instance_._instance,
  &::xviz_msgs::_Circle2fArray_default_instance_._instance,
  &::xviz_msgs::_PointCloud2f_default_instance_._instance,
  &::xviz_msgs::_Marker2f_default_instance_._instance,
  &::xviz_msgs::_Marker2fArray_default_instance_._instance,
  &::xviz_msgs::_Transform2fNode_default_instance_._instance,
  &::xviz_msgs::_MapDouble_DataEntry_DoNotUse_default_instance_._instance,
  &::xviz_msgs::_MapDouble_default_instance_._instance,
  &::xviz_msgs::_MapString_DataEntry_DoNotUse_default_instance_._instance,
  &::xviz_msgs::_MapString_default_instance_._instance,
};

const char descriptor_table_protodef_xviz_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017xviz_msgs.proto\022\txviz_msgs\"5\n\006Header\022\014"
  "\n\004name\030\001 \001(\t\022\017\n\007frameId\030\002 \001(\t\022\014\n\004info\030\003 "
  "\001(\t\" \n\010Vector2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"_\n"
  "\006Pose2f\022!\n\006header\030\001 \001(\0132\021.xviz_msgs.Head"
  "er\022%\n\010position\030\002 \001(\0132\023.xviz_msgs.Vector2"
  "f\022\013\n\003yaw\030\003 \001(\002\"V\n\013Pose2fArray\022!\n\006header\030"
  "\001 \001(\0132\021.xviz_msgs.Header\022$\n\tposeArray\030\002 "
  "\003(\0132\021.xviz_msgs.Pose2f\"c\n\tPolygon2f\022!\n\006h"
  "eader\030\001 \001(\0132\021.xviz_msgs.Header\022#\n\006points"
  "\030\002 \003(\0132\023.xviz_msgs.Vector2f\022\016\n\006filled\030\003 "
  "\001(\010\"_\n\016Polygon2fArray\022!\n\006header\030\001 \001(\0132\021."
  "xviz_msgs.Header\022*\n\014polygonArray\030\002 \003(\0132\024"
  ".xviz_msgs.Polygon2f\"b\n\006Path2f\022!\n\006header"
  "\030\001 \001(\0132\021.xviz_msgs.Header\022#\n\006points\030\002 \003("
  "\0132\023.xviz_msgs.Vector2f\022\020\n\010isDashed\030\003 \001(\010"
  "\"V\n\013Path2fArray\022!\n\006header\030\001 \001(\0132\021.xviz_m"
  "sgs.Header\022$\n\tpathArray\030\002 \003(\0132\021.xviz_msg"
  "s.Path2f\"r\n\010Circle2f\022!\n\006header\030\001 \001(\0132\021.x"
  "viz_msgs.Header\022#\n\006center\030\002 \001(\0132\023.xviz_m"
  "sgs.Vector2f\022\016\n\006raduis\030\003 \001(\002\022\016\n\006filled\030\004"
  " \001(\010\"\\\n\rCircle2fArray\022!\n\006header\030\001 \001(\0132\021."
  "xviz_msgs.Header\022(\n\013circleArray\030\002 \003(\0132\023."
  "xviz_msgs.Circle2f\"V\n\014PointCloud2f\022!\n\006he"
  "ader\030\001 \001(\0132\021.xviz_msgs.Header\022#\n\006points\030"
  "\002 \003(\0132\023.xviz_msgs.Vector2f\"\313\002\n\010Marker2f\022"
  "!\n\006header\030\001 \001(\0132\021.xviz_msgs.Header\022\014\n\004ty"
  "pe\030\002 \001(\r\022\037\n\004path\030\003 \001(\0132\021.xviz_msgs.Path2"
  "f\022%\n\007polygon\030\004 \001(\0132\024.xviz_msgs.Polygon2f"
  "\022#\n\006cirlce\030\005 \001(\0132\023.xviz_msgs.Circle2f\022\037\n"
  "\004pose\030\006 \001(\0132\021.xviz_msgs.Pose2f\022,\n\013point_"
  "cloud\030\007 \001(\0132\027.xviz_msgs.PointCloud2f\022\014\n\004"
  "text\030\010 \001(\t\022\021\n\tcolorType\030\t \001(\r\022\016\n\006length\030"
  "\n \001(\002\022\021\n\tthickness\030\013 \001(\002\022\016\n\006radius\030\014 \001(\002"
  "\"\\\n\rMarker2fArray\022!\n\006header\030\001 \001(\0132\021.xviz"
  "_msgs.Header\022(\n\013markerArray\030\002 \003(\0132\023.xviz"
  "_msgs.Marker2f\"l\n\017Transform2fNode\022\"\n\005tra"
  "ns\030\001 \001(\0132\023.xviz_msgs.Vector2f\022\r\n\005angle\030\002"
  " \001(\002\022\017\n\007frameId\030\003 \001(\t\022\025\n\rparentFrameId\030\004"
  " \001(\t\"f\n\tMapDouble\022,\n\004data\030\001 \003(\0132\036.xviz_m"
  "sgs.MapDouble.DataEntry\032+\n\tDataEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"f\n\tMapStrin"
  "g\022,\n\004data\030\001 \003(\0132\036.xviz_msgs.MapString.Da"
  "taEntry\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_xviz_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xviz_5fmsgs_2eproto = {
    false, false, 1740, descriptor_table_protodef_xviz_5fmsgs_2eproto,
    "xviz_msgs.proto",
    &descriptor_table_xviz_5fmsgs_2eproto_once, nullptr, 0, 18,
    schemas, file_default_instances, TableStruct_xviz_5fmsgs_2eproto::offsets,
    file_level_metadata_xviz_5fmsgs_2eproto, file_level_enum_descriptors_xviz_5fmsgs_2eproto,
    file_level_service_descriptors_xviz_5fmsgs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xviz_5fmsgs_2eproto_getter() {
  return &descriptor_table_xviz_5fmsgs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xviz_5fmsgs_2eproto(&descriptor_table_xviz_5fmsgs_2eproto);
namespace xviz_msgs {

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.frameid_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frameid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frameid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frameid().empty()) {
    _this->_impl_.frameid_.Set(from._internal_frameid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.frameid_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frameid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frameid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.frameid_.Destroy();
  _impl_.info_.Destroy();
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.frameid_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xviz_msgs.Header.name"));
        } else
          goto handle_unusual;
        continue;
      // string frameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frameid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xviz_msgs.Header.frameId"));
        } else
          goto handle_unusual;
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xviz_msgs.Header.info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz_msgs.Header.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string frameId = 2;
  if (!this->_internal_frameid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frameid().data(), static_cast<int>(this->_internal_frameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz_msgs.Header.frameId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frameid(), target);
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz_msgs.Header.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string frameId = 2;
  if (!this->_internal_frameid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frameid());
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_frameid().empty()) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frameid_, lhs_arena,
      &other->_impl_.frameid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[0]);
}

// ===================================================================

class Vector2f::_Internal {
 public:
};

Vector2f::Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Vector2f)
}

inline void Vector2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Vector2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Vector2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Vector2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Vector2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2f::GetClassData() const { return &_class_data_; }


void Vector2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Vector2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)
      + sizeof(Vector2f::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[1]);
}

// ===================================================================

class Pose2f::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Pose2f* msg);
  static const ::xviz_msgs::Vector2f& position(const Pose2f* msg);
};

const ::xviz_msgs::Header&
Pose2f::_Internal::header(const Pose2f* msg) {
  return *msg->_impl_.header_;
}
const ::xviz_msgs::Vector2f&
Pose2f::_Internal::position(const Pose2f* msg) {
  return *msg->_impl_.position_;
}
Pose2f::Pose2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Pose2f)
}
Pose2f::Pose2f(const Pose2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pose2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::xviz_msgs::Vector2f(*from._impl_.position_);
  }
  _this->_impl_.yaw_ = from._impl_.yaw_;
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Pose2f)
}

inline void Pose2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pose2f::~Pose2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Pose2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Pose2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pose2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Pose2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _impl_.yaw_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.Vector2f position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Pose2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .xviz_msgs.Vector2f position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Pose2f)
  return target;
}

size_t Pose2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Pose2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .xviz_msgs.Vector2f position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pose2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose2f::GetClassData() const { return &_class_data_; }


void Pose2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pose2f*>(&to_msg);
  auto& from = static_cast<const Pose2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Pose2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::xviz_msgs::Vector2f::MergeFrom(
        from._internal_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose2f::CopyFrom(const Pose2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Pose2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2f::IsInitialized() const {
  return true;
}

void Pose2f::InternalSwap(Pose2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose2f, _impl_.yaw_)
      + sizeof(Pose2f::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Pose2f, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[2]);
}

// ===================================================================

class Pose2fArray::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Pose2fArray* msg);
};

const ::xviz_msgs::Header&
Pose2fArray::_Internal::header(const Pose2fArray* msg) {
  return *msg->_impl_.header_;
}
Pose2fArray::Pose2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Pose2fArray)
}
Pose2fArray::Pose2fArray(const Pose2fArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pose2fArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posearray_){from._impl_.posearray_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Pose2fArray)
}

inline void Pose2fArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posearray_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pose2fArray::~Pose2fArray() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Pose2fArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose2fArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.posearray_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Pose2fArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pose2fArray::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Pose2fArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.posearray_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose2fArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Pose2f poseArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posearray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose2fArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Pose2fArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Pose2f poseArray = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posearray_size()); i < n; i++) {
    const auto& repfield = this->_internal_posearray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Pose2fArray)
  return target;
}

size_t Pose2fArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Pose2fArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Pose2f poseArray = 2;
  total_size += 1UL * this->_internal_posearray_size();
  for (const auto& msg : this->_impl_.posearray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose2fArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pose2fArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose2fArray::GetClassData() const { return &_class_data_; }


void Pose2fArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pose2fArray*>(&to_msg);
  auto& from = static_cast<const Pose2fArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Pose2fArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.posearray_.MergeFrom(from._impl_.posearray_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose2fArray::CopyFrom(const Pose2fArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Pose2fArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2fArray::IsInitialized() const {
  return true;
}

void Pose2fArray::InternalSwap(Pose2fArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.posearray_.InternalSwap(&other->_impl_.posearray_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose2fArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[3]);
}

// ===================================================================

class Polygon2f::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Polygon2f* msg);
};

const ::xviz_msgs::Header&
Polygon2f::_Internal::header(const Polygon2f* msg) {
  return *msg->_impl_.header_;
}
Polygon2f::Polygon2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Polygon2f)
}
Polygon2f::Polygon2f(const Polygon2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.filled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  _this->_impl_.filled_ = from._impl_.filled_;
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Polygon2f)
}

inline void Polygon2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.filled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon2f::~Polygon2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Polygon2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Polygon2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Polygon2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _impl_.filled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Vector2f points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool filled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Polygon2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Vector2f points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool filled = 3;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_filled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Polygon2f)
  return target;
}

size_t Polygon2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Polygon2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Vector2f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // bool filled = 3;
  if (this->_internal_filled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon2f::GetClassData() const { return &_class_data_; }


void Polygon2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon2f*>(&to_msg);
  auto& from = static_cast<const Polygon2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Polygon2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_filled() != 0) {
    _this->_internal_set_filled(from._internal_filled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon2f::CopyFrom(const Polygon2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Polygon2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon2f::IsInitialized() const {
  return true;
}

void Polygon2f::InternalSwap(Polygon2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polygon2f, _impl_.filled_)
      + sizeof(Polygon2f::_impl_.filled_)
      - PROTOBUF_FIELD_OFFSET(Polygon2f, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[4]);
}

// ===================================================================

class Polygon2fArray::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Polygon2fArray* msg);
};

const ::xviz_msgs::Header&
Polygon2fArray::_Internal::header(const Polygon2fArray* msg) {
  return *msg->_impl_.header_;
}
Polygon2fArray::Polygon2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Polygon2fArray)
}
Polygon2fArray::Polygon2fArray(const Polygon2fArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon2fArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.polygonarray_){from._impl_.polygonarray_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Polygon2fArray)
}

inline void Polygon2fArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.polygonarray_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon2fArray::~Polygon2fArray() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Polygon2fArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon2fArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygonarray_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Polygon2fArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon2fArray::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Polygon2fArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygonarray_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon2fArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Polygon2f polygonArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygonarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon2fArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Polygon2fArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Polygon2f polygonArray = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygonarray_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygonarray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Polygon2fArray)
  return target;
}

size_t Polygon2fArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Polygon2fArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Polygon2f polygonArray = 2;
  total_size += 1UL * this->_internal_polygonarray_size();
  for (const auto& msg : this->_impl_.polygonarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon2fArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon2fArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon2fArray::GetClassData() const { return &_class_data_; }


void Polygon2fArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon2fArray*>(&to_msg);
  auto& from = static_cast<const Polygon2fArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Polygon2fArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.polygonarray_.MergeFrom(from._impl_.polygonarray_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon2fArray::CopyFrom(const Polygon2fArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Polygon2fArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon2fArray::IsInitialized() const {
  return true;
}

void Polygon2fArray::InternalSwap(Polygon2fArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.polygonarray_.InternalSwap(&other->_impl_.polygonarray_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon2fArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[5]);
}

// ===================================================================

class Path2f::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Path2f* msg);
};

const ::xviz_msgs::Header&
Path2f::_Internal::header(const Path2f* msg) {
  return *msg->_impl_.header_;
}
Path2f::Path2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Path2f)
}
Path2f::Path2f(const Path2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Path2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.isdashed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  _this->_impl_.isdashed_ = from._impl_.isdashed_;
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Path2f)
}

inline void Path2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.isdashed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Path2f::~Path2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Path2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Path2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Path2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _impl_.isdashed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Vector2f points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool isDashed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isdashed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Path2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Vector2f points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool isDashed = 3;
  if (this->_internal_isdashed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isdashed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Path2f)
  return target;
}

size_t Path2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Path2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Vector2f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // bool isDashed = 3;
  if (this->_internal_isdashed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Path2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path2f::GetClassData() const { return &_class_data_; }


void Path2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Path2f*>(&to_msg);
  auto& from = static_cast<const Path2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Path2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_isdashed() != 0) {
    _this->_internal_set_isdashed(from._internal_isdashed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path2f::CopyFrom(const Path2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Path2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path2f::IsInitialized() const {
  return true;
}

void Path2f::InternalSwap(Path2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Path2f, _impl_.isdashed_)
      + sizeof(Path2f::_impl_.isdashed_)
      - PROTOBUF_FIELD_OFFSET(Path2f, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Path2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[6]);
}

// ===================================================================

class Path2fArray::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Path2fArray* msg);
};

const ::xviz_msgs::Header&
Path2fArray::_Internal::header(const Path2fArray* msg) {
  return *msg->_impl_.header_;
}
Path2fArray::Path2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Path2fArray)
}
Path2fArray::Path2fArray(const Path2fArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Path2fArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.patharray_){from._impl_.patharray_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Path2fArray)
}

inline void Path2fArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.patharray_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Path2fArray::~Path2fArray() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Path2fArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path2fArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.patharray_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Path2fArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path2fArray::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Path2fArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.patharray_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path2fArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Path2f pathArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patharray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path2fArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Path2fArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Path2f pathArray = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_patharray_size()); i < n; i++) {
    const auto& repfield = this->_internal_patharray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Path2fArray)
  return target;
}

size_t Path2fArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Path2fArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Path2f pathArray = 2;
  total_size += 1UL * this->_internal_patharray_size();
  for (const auto& msg : this->_impl_.patharray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path2fArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Path2fArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path2fArray::GetClassData() const { return &_class_data_; }


void Path2fArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Path2fArray*>(&to_msg);
  auto& from = static_cast<const Path2fArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Path2fArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.patharray_.MergeFrom(from._impl_.patharray_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path2fArray::CopyFrom(const Path2fArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Path2fArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path2fArray::IsInitialized() const {
  return true;
}

void Path2fArray::InternalSwap(Path2fArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.patharray_.InternalSwap(&other->_impl_.patharray_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path2fArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[7]);
}

// ===================================================================

class Circle2f::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Circle2f* msg);
  static const ::xviz_msgs::Vector2f& center(const Circle2f* msg);
};

const ::xviz_msgs::Header&
Circle2f::_Internal::header(const Circle2f* msg) {
  return *msg->_impl_.header_;
}
const ::xviz_msgs::Vector2f&
Circle2f::_Internal::center(const Circle2f* msg) {
  return *msg->_impl_.center_;
}
Circle2f::Circle2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Circle2f)
}
Circle2f::Circle2f(const Circle2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Circle2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.raduis_){}
    , decltype(_impl_.filled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::xviz_msgs::Vector2f(*from._impl_.center_);
  }
  ::memcpy(&_impl_.raduis_, &from._impl_.raduis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filled_) -
    reinterpret_cast<char*>(&_impl_.raduis_)) + sizeof(_impl_.filled_));
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Circle2f)
}

inline void Circle2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.raduis_){0}
    , decltype(_impl_.filled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Circle2f::~Circle2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Circle2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Circle2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.center_;
}

void Circle2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Circle2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Circle2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  ::memset(&_impl_.raduis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filled_) -
      reinterpret_cast<char*>(&_impl_.raduis_)) + sizeof(_impl_.filled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Circle2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.Vector2f center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float raduis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.raduis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool filled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Circle2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Circle2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .xviz_msgs.Vector2f center = 2;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float raduis = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_raduis = this->_internal_raduis();
  uint32_t raw_raduis;
  memcpy(&raw_raduis, &tmp_raduis, sizeof(tmp_raduis));
  if (raw_raduis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_raduis(), target);
  }

  // bool filled = 4;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_filled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Circle2f)
  return target;
}

size_t Circle2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Circle2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .xviz_msgs.Vector2f center = 2;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // float raduis = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_raduis = this->_internal_raduis();
  uint32_t raw_raduis;
  memcpy(&raw_raduis, &tmp_raduis, sizeof(tmp_raduis));
  if (raw_raduis != 0) {
    total_size += 1 + 4;
  }

  // bool filled = 4;
  if (this->_internal_filled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Circle2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Circle2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Circle2f::GetClassData() const { return &_class_data_; }


void Circle2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Circle2f*>(&to_msg);
  auto& from = static_cast<const Circle2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Circle2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::xviz_msgs::Vector2f::MergeFrom(
        from._internal_center());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_raduis = from._internal_raduis();
  uint32_t raw_raduis;
  memcpy(&raw_raduis, &tmp_raduis, sizeof(tmp_raduis));
  if (raw_raduis != 0) {
    _this->_internal_set_raduis(from._internal_raduis());
  }
  if (from._internal_filled() != 0) {
    _this->_internal_set_filled(from._internal_filled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Circle2f::CopyFrom(const Circle2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Circle2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle2f::IsInitialized() const {
  return true;
}

void Circle2f::InternalSwap(Circle2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle2f, _impl_.filled_)
      + sizeof(Circle2f::_impl_.filled_)
      - PROTOBUF_FIELD_OFFSET(Circle2f, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Circle2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[8]);
}

// ===================================================================

class Circle2fArray::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Circle2fArray* msg);
};

const ::xviz_msgs::Header&
Circle2fArray::_Internal::header(const Circle2fArray* msg) {
  return *msg->_impl_.header_;
}
Circle2fArray::Circle2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Circle2fArray)
}
Circle2fArray::Circle2fArray(const Circle2fArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Circle2fArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.circlearray_){from._impl_.circlearray_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Circle2fArray)
}

inline void Circle2fArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.circlearray_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Circle2fArray::~Circle2fArray() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Circle2fArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Circle2fArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.circlearray_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Circle2fArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Circle2fArray::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Circle2fArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.circlearray_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Circle2fArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Circle2f circleArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_circlearray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Circle2fArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Circle2fArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Circle2f circleArray = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_circlearray_size()); i < n; i++) {
    const auto& repfield = this->_internal_circlearray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Circle2fArray)
  return target;
}

size_t Circle2fArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Circle2fArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Circle2f circleArray = 2;
  total_size += 1UL * this->_internal_circlearray_size();
  for (const auto& msg : this->_impl_.circlearray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Circle2fArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Circle2fArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Circle2fArray::GetClassData() const { return &_class_data_; }


void Circle2fArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Circle2fArray*>(&to_msg);
  auto& from = static_cast<const Circle2fArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Circle2fArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.circlearray_.MergeFrom(from._impl_.circlearray_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Circle2fArray::CopyFrom(const Circle2fArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Circle2fArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle2fArray::IsInitialized() const {
  return true;
}

void Circle2fArray::InternalSwap(Circle2fArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.circlearray_.InternalSwap(&other->_impl_.circlearray_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Circle2fArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[9]);
}

// ===================================================================

class PointCloud2f::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const PointCloud2f* msg);
};

const ::xviz_msgs::Header&
PointCloud2f::_Internal::header(const PointCloud2f* msg) {
  return *msg->_impl_.header_;
}
PointCloud2f::PointCloud2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.PointCloud2f)
}
PointCloud2f::PointCloud2f(const PointCloud2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PointCloud2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.PointCloud2f)
}

inline void PointCloud2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PointCloud2f::~PointCloud2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.PointCloud2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointCloud2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void PointCloud2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointCloud2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.PointCloud2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointCloud2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Vector2f points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointCloud2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.PointCloud2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Vector2f points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.PointCloud2f)
  return target;
}

size_t PointCloud2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.PointCloud2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Vector2f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointCloud2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PointCloud2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointCloud2f::GetClassData() const { return &_class_data_; }


void PointCloud2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PointCloud2f*>(&to_msg);
  auto& from = static_cast<const PointCloud2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.PointCloud2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointCloud2f::CopyFrom(const PointCloud2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.PointCloud2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud2f::IsInitialized() const {
  return true;
}

void PointCloud2f::InternalSwap(PointCloud2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloud2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[10]);
}

// ===================================================================

class Marker2f::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Marker2f* msg);
  static const ::xviz_msgs::Path2f& path(const Marker2f* msg);
  static const ::xviz_msgs::Polygon2f& polygon(const Marker2f* msg);
  static const ::xviz_msgs::Circle2f& cirlce(const Marker2f* msg);
  static const ::xviz_msgs::Pose2f& pose(const Marker2f* msg);
  static const ::xviz_msgs::PointCloud2f& point_cloud(const Marker2f* msg);
};

const ::xviz_msgs::Header&
Marker2f::_Internal::header(const Marker2f* msg) {
  return *msg->_impl_.header_;
}
const ::xviz_msgs::Path2f&
Marker2f::_Internal::path(const Marker2f* msg) {
  return *msg->_impl_.path_;
}
const ::xviz_msgs::Polygon2f&
Marker2f::_Internal::polygon(const Marker2f* msg) {
  return *msg->_impl_.polygon_;
}
const ::xviz_msgs::Circle2f&
Marker2f::_Internal::cirlce(const Marker2f* msg) {
  return *msg->_impl_.cirlce_;
}
const ::xviz_msgs::Pose2f&
Marker2f::_Internal::pose(const Marker2f* msg) {
  return *msg->_impl_.pose_;
}
const ::xviz_msgs::PointCloud2f&
Marker2f::_Internal::point_cloud(const Marker2f* msg) {
  return *msg->_impl_.point_cloud_;
}
Marker2f::Marker2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Marker2f)
}
Marker2f::Marker2f(const Marker2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Marker2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.cirlce_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.point_cloud_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.colortype_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.thickness_){}
    , decltype(_impl_.radius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_path()) {
    _this->_impl_.path_ = new ::xviz_msgs::Path2f(*from._impl_.path_);
  }
  if (from._internal_has_polygon()) {
    _this->_impl_.polygon_ = new ::xviz_msgs::Polygon2f(*from._impl_.polygon_);
  }
  if (from._internal_has_cirlce()) {
    _this->_impl_.cirlce_ = new ::xviz_msgs::Circle2f(*from._impl_.cirlce_);
  }
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::xviz_msgs::Pose2f(*from._impl_.pose_);
  }
  if (from._internal_has_point_cloud()) {
    _this->_impl_.point_cloud_ = new ::xviz_msgs::PointCloud2f(*from._impl_.point_cloud_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radius_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.radius_));
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Marker2f)
}

inline void Marker2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.cirlce_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.point_cloud_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.colortype_){0u}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.thickness_){0}
    , decltype(_impl_.radius_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Marker2f::~Marker2f() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Marker2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Marker2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.path_;
  if (this != internal_default_instance()) delete _impl_.polygon_;
  if (this != internal_default_instance()) delete _impl_.cirlce_;
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.point_cloud_;
}

void Marker2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Marker2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Marker2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.path_ != nullptr) {
    delete _impl_.path_;
  }
  _impl_.path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.polygon_ != nullptr) {
    delete _impl_.polygon_;
  }
  _impl_.polygon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cirlce_ != nullptr) {
    delete _impl_.cirlce_;
  }
  _impl_.cirlce_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_cloud_ != nullptr) {
    delete _impl_.point_cloud_;
  }
  _impl_.point_cloud_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.radius_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.Path2f path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.Polygon2f polygon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.Circle2f cirlce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cirlce(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.Pose2f pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz_msgs.PointCloud2f point_cloud = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_cloud(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xviz_msgs.Marker2f.text"));
        } else
          goto handle_unusual;
        continue;
      // uint32 colorType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.colortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float thickness = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float radius = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Marker2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Marker2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // .xviz_msgs.Path2f path = 3;
  if (this->_internal_has_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // .xviz_msgs.Polygon2f polygon = 4;
  if (this->_internal_has_polygon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  // .xviz_msgs.Circle2f cirlce = 5;
  if (this->_internal_has_cirlce()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cirlce(this),
        _Internal::cirlce(this).GetCachedSize(), target, stream);
  }

  // .xviz_msgs.Pose2f pose = 6;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .xviz_msgs.PointCloud2f point_cloud = 7;
  if (this->_internal_has_point_cloud()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::point_cloud(this),
        _Internal::point_cloud(this).GetCachedSize(), target, stream);
  }

  // string text = 8;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz_msgs.Marker2f.text");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_text(), target);
  }

  // uint32 colorType = 9;
  if (this->_internal_colortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_colortype(), target);
  }

  // float length = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_length(), target);
  }

  // float thickness = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_thickness(), target);
  }

  // float radius = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Marker2f)
  return target;
}

size_t Marker2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Marker2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 8;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .xviz_msgs.Path2f path = 3;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_);
  }

  // .xviz_msgs.Polygon2f polygon = 4;
  if (this->_internal_has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.polygon_);
  }

  // .xviz_msgs.Circle2f cirlce = 5;
  if (this->_internal_has_cirlce()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cirlce_);
  }

  // .xviz_msgs.Pose2f pose = 6;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // .xviz_msgs.PointCloud2f point_cloud = 7;
  if (this->_internal_has_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_cloud_);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 colorType = 9;
  if (this->_internal_colortype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_colortype());
  }

  // float length = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  // float thickness = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 1 + 4;
  }

  // float radius = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Marker2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker2f::GetClassData() const { return &_class_data_; }


void Marker2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Marker2f*>(&to_msg);
  auto& from = static_cast<const Marker2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Marker2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_path()) {
    _this->_internal_mutable_path()->::xviz_msgs::Path2f::MergeFrom(
        from._internal_path());
  }
  if (from._internal_has_polygon()) {
    _this->_internal_mutable_polygon()->::xviz_msgs::Polygon2f::MergeFrom(
        from._internal_polygon());
  }
  if (from._internal_has_cirlce()) {
    _this->_internal_mutable_cirlce()->::xviz_msgs::Circle2f::MergeFrom(
        from._internal_cirlce());
  }
  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::xviz_msgs::Pose2f::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_has_point_cloud()) {
    _this->_internal_mutable_point_cloud()->::xviz_msgs::PointCloud2f::MergeFrom(
        from._internal_point_cloud());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_colortype() != 0) {
    _this->_internal_set_colortype(from._internal_colortype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = from._internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Marker2f::CopyFrom(const Marker2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Marker2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker2f::IsInitialized() const {
  return true;
}

void Marker2f::InternalSwap(Marker2f* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Marker2f, _impl_.radius_)
      + sizeof(Marker2f::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(Marker2f, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[11]);
}

// ===================================================================

class Marker2fArray::_Internal {
 public:
  static const ::xviz_msgs::Header& header(const Marker2fArray* msg);
};

const ::xviz_msgs::Header&
Marker2fArray::_Internal::header(const Marker2fArray* msg) {
  return *msg->_impl_.header_;
}
Marker2fArray::Marker2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Marker2fArray)
}
Marker2fArray::Marker2fArray(const Marker2fArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Marker2fArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.markerarray_){from._impl_.markerarray_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::xviz_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Marker2fArray)
}

inline void Marker2fArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.markerarray_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Marker2fArray::~Marker2fArray() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Marker2fArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Marker2fArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.markerarray_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Marker2fArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Marker2fArray::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Marker2fArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.markerarray_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker2fArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz_msgs.Marker2f markerArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markerarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Marker2fArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Marker2fArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .xviz_msgs.Marker2f markerArray = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markerarray_size()); i < n; i++) {
    const auto& repfield = this->_internal_markerarray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Marker2fArray)
  return target;
}

size_t Marker2fArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Marker2fArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz_msgs.Marker2f markerArray = 2;
  total_size += 1UL * this->_internal_markerarray_size();
  for (const auto& msg : this->_impl_.markerarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker2fArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Marker2fArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker2fArray::GetClassData() const { return &_class_data_; }


void Marker2fArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Marker2fArray*>(&to_msg);
  auto& from = static_cast<const Marker2fArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Marker2fArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.markerarray_.MergeFrom(from._impl_.markerarray_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::xviz_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Marker2fArray::CopyFrom(const Marker2fArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Marker2fArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker2fArray::IsInitialized() const {
  return true;
}

void Marker2fArray::InternalSwap(Marker2fArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.markerarray_.InternalSwap(&other->_impl_.markerarray_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker2fArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[12]);
}

// ===================================================================

class Transform2fNode::_Internal {
 public:
  static const ::xviz_msgs::Vector2f& trans(const Transform2fNode* msg);
};

const ::xviz_msgs::Vector2f&
Transform2fNode::_Internal::trans(const Transform2fNode* msg) {
  return *msg->_impl_.trans_;
}
Transform2fNode::Transform2fNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.Transform2fNode)
}
Transform2fNode::Transform2fNode(const Transform2fNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transform2fNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frameid_){}
    , decltype(_impl_.parentframeid_){}
    , decltype(_impl_.trans_){nullptr}
    , decltype(_impl_.angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.frameid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frameid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frameid().empty()) {
    _this->_impl_.frameid_.Set(from._internal_frameid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentframeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentframeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parentframeid().empty()) {
    _this->_impl_.parentframeid_.Set(from._internal_parentframeid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trans()) {
    _this->_impl_.trans_ = new ::xviz_msgs::Vector2f(*from._impl_.trans_);
  }
  _this->_impl_.angle_ = from._impl_.angle_;
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.Transform2fNode)
}

inline void Transform2fNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frameid_){}
    , decltype(_impl_.parentframeid_){}
    , decltype(_impl_.trans_){nullptr}
    , decltype(_impl_.angle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.frameid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frameid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentframeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentframeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transform2fNode::~Transform2fNode() {
  // @@protoc_insertion_point(destructor:xviz_msgs.Transform2fNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transform2fNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frameid_.Destroy();
  _impl_.parentframeid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trans_;
}

void Transform2fNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transform2fNode::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.Transform2fNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frameid_.ClearToEmpty();
  _impl_.parentframeid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trans_ != nullptr) {
    delete _impl_.trans_;
  }
  _impl_.trans_ = nullptr;
  _impl_.angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform2fNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz_msgs.Vector2f trans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string frameId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frameid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xviz_msgs.Transform2fNode.frameId"));
        } else
          goto handle_unusual;
        continue;
      // string parentFrameId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_parentframeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "xviz_msgs.Transform2fNode.parentFrameId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform2fNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.Transform2fNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz_msgs.Vector2f trans = 1;
  if (this->_internal_has_trans()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trans(this),
        _Internal::trans(this).GetCachedSize(), target, stream);
  }

  // float angle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_angle(), target);
  }

  // string frameId = 3;
  if (!this->_internal_frameid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frameid().data(), static_cast<int>(this->_internal_frameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz_msgs.Transform2fNode.frameId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frameid(), target);
  }

  // string parentFrameId = 4;
  if (!this->_internal_parentframeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentframeid().data(), static_cast<int>(this->_internal_parentframeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz_msgs.Transform2fNode.parentFrameId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parentframeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.Transform2fNode)
  return target;
}

size_t Transform2fNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.Transform2fNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frameId = 3;
  if (!this->_internal_frameid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frameid());
  }

  // string parentFrameId = 4;
  if (!this->_internal_parentframeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentframeid());
  }

  // .xviz_msgs.Vector2f trans = 1;
  if (this->_internal_has_trans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trans_);
  }

  // float angle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform2fNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transform2fNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform2fNode::GetClassData() const { return &_class_data_; }


void Transform2fNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transform2fNode*>(&to_msg);
  auto& from = static_cast<const Transform2fNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.Transform2fNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frameid().empty()) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  if (!from._internal_parentframeid().empty()) {
    _this->_internal_set_parentframeid(from._internal_parentframeid());
  }
  if (from._internal_has_trans()) {
    _this->_internal_mutable_trans()->::xviz_msgs::Vector2f::MergeFrom(
        from._internal_trans());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform2fNode::CopyFrom(const Transform2fNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.Transform2fNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform2fNode::IsInitialized() const {
  return true;
}

void Transform2fNode::InternalSwap(Transform2fNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frameid_, lhs_arena,
      &other->_impl_.frameid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentframeid_, lhs_arena,
      &other->_impl_.parentframeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform2fNode, _impl_.angle_)
      + sizeof(Transform2fNode::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(Transform2fNode, _impl_.trans_)>(
          reinterpret_cast<char*>(&_impl_.trans_),
          reinterpret_cast<char*>(&other->_impl_.trans_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform2fNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[13]);
}

// ===================================================================

MapDouble_DataEntry_DoNotUse::MapDouble_DataEntry_DoNotUse() {}
MapDouble_DataEntry_DoNotUse::MapDouble_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapDouble_DataEntry_DoNotUse::MergeFrom(const MapDouble_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapDouble_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[14]);
}

// ===================================================================

class MapDouble::_Internal {
 public:
};

MapDouble::MapDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapDouble::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.MapDouble)
}
MapDouble::MapDouble(const MapDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.MapDouble)
}

inline void MapDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapDouble::~MapDouble() {
  // @@protoc_insertion_point(destructor:xviz_msgs.MapDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
}

void MapDouble::ArenaDtor(void* object) {
  MapDouble* _this = reinterpret_cast< MapDouble* >(object);
  _this->_impl_.data_.Destruct();
}
void MapDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.MapDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, double> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.MapDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, double> data = 1;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = MapDouble_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xviz_msgs.MapDouble.DataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.MapDouble)
  return target;
}

size_t MapDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.MapDouble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += MapDouble_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapDouble::GetClassData() const { return &_class_data_; }


void MapDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapDouble*>(&to_msg);
  auto& from = static_cast<const MapDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.MapDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapDouble::CopyFrom(const MapDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.MapDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDouble::IsInitialized() const {
  return true;
}

void MapDouble::InternalSwap(MapDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[15]);
}

// ===================================================================

MapString_DataEntry_DoNotUse::MapString_DataEntry_DoNotUse() {}
MapString_DataEntry_DoNotUse::MapString_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapString_DataEntry_DoNotUse::MergeFrom(const MapString_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapString_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[16]);
}

// ===================================================================

class MapString::_Internal {
 public:
};

MapString::MapString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapString::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xviz_msgs.MapString)
}
MapString::MapString(const MapString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  // @@protoc_insertion_point(copy_constructor:xviz_msgs.MapString)
}

inline void MapString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapString::~MapString() {
  // @@protoc_insertion_point(destructor:xviz_msgs.MapString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
}

void MapString::ArenaDtor(void* object) {
  MapString* _this = reinterpret_cast< MapString* >(object);
  _this->_impl_.data_.Destruct();
}
void MapString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapString::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz_msgs.MapString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz_msgs.MapString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> data = 1;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = MapString_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xviz_msgs.MapString.DataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xviz_msgs.MapString.DataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz_msgs.MapString)
  return target;
}

size_t MapString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz_msgs.MapString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += MapString_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapString::GetClassData() const { return &_class_data_; }


void MapString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapString*>(&to_msg);
  auto& from = static_cast<const MapString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xviz_msgs.MapString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapString::CopyFrom(const MapString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz_msgs.MapString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapString::IsInitialized() const {
  return true;
}

void MapString::InternalSwap(MapString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xviz_5fmsgs_2eproto_getter, &descriptor_table_xviz_5fmsgs_2eproto_once,
      file_level_metadata_xviz_5fmsgs_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz_msgs::Header*
Arena::CreateMaybeMessage< ::xviz_msgs::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Vector2f*
Arena::CreateMaybeMessage< ::xviz_msgs::Vector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Vector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Pose2f*
Arena::CreateMaybeMessage< ::xviz_msgs::Pose2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Pose2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Pose2fArray*
Arena::CreateMaybeMessage< ::xviz_msgs::Pose2fArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Pose2fArray >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Polygon2f*
Arena::CreateMaybeMessage< ::xviz_msgs::Polygon2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Polygon2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Polygon2fArray*
Arena::CreateMaybeMessage< ::xviz_msgs::Polygon2fArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Polygon2fArray >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Path2f*
Arena::CreateMaybeMessage< ::xviz_msgs::Path2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Path2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Path2fArray*
Arena::CreateMaybeMessage< ::xviz_msgs::Path2fArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Path2fArray >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Circle2f*
Arena::CreateMaybeMessage< ::xviz_msgs::Circle2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Circle2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Circle2fArray*
Arena::CreateMaybeMessage< ::xviz_msgs::Circle2fArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Circle2fArray >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::PointCloud2f*
Arena::CreateMaybeMessage< ::xviz_msgs::PointCloud2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::PointCloud2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Marker2f*
Arena::CreateMaybeMessage< ::xviz_msgs::Marker2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Marker2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Marker2fArray*
Arena::CreateMaybeMessage< ::xviz_msgs::Marker2fArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Marker2fArray >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::Transform2fNode*
Arena::CreateMaybeMessage< ::xviz_msgs::Transform2fNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::Transform2fNode >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::MapDouble_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xviz_msgs::MapDouble_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::MapDouble_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::MapDouble*
Arena::CreateMaybeMessage< ::xviz_msgs::MapDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::MapDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::MapString_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xviz_msgs::MapString_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::MapString_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz_msgs::MapString*
Arena::CreateMaybeMessage< ::xviz_msgs::MapString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz_msgs::MapString >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
