// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xviz_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xviz_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xviz_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xviz_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xviz_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xviz_5fmsgs_2eproto;
namespace xviz_msgs {
class Circle2f;
struct Circle2fDefaultTypeInternal;
extern Circle2fDefaultTypeInternal _Circle2f_default_instance_;
class Circle2fArray;
struct Circle2fArrayDefaultTypeInternal;
extern Circle2fArrayDefaultTypeInternal _Circle2fArray_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class MapDouble;
struct MapDoubleDefaultTypeInternal;
extern MapDoubleDefaultTypeInternal _MapDouble_default_instance_;
class MapDouble_DataEntry_DoNotUse;
struct MapDouble_DataEntry_DoNotUseDefaultTypeInternal;
extern MapDouble_DataEntry_DoNotUseDefaultTypeInternal _MapDouble_DataEntry_DoNotUse_default_instance_;
class MapString;
struct MapStringDefaultTypeInternal;
extern MapStringDefaultTypeInternal _MapString_default_instance_;
class MapString_DataEntry_DoNotUse;
struct MapString_DataEntry_DoNotUseDefaultTypeInternal;
extern MapString_DataEntry_DoNotUseDefaultTypeInternal _MapString_DataEntry_DoNotUse_default_instance_;
class Marker2f;
struct Marker2fDefaultTypeInternal;
extern Marker2fDefaultTypeInternal _Marker2f_default_instance_;
class Marker2fArray;
struct Marker2fArrayDefaultTypeInternal;
extern Marker2fArrayDefaultTypeInternal _Marker2fArray_default_instance_;
class Path2f;
struct Path2fDefaultTypeInternal;
extern Path2fDefaultTypeInternal _Path2f_default_instance_;
class Path2fArray;
struct Path2fArrayDefaultTypeInternal;
extern Path2fArrayDefaultTypeInternal _Path2fArray_default_instance_;
class PointCloud2f;
struct PointCloud2fDefaultTypeInternal;
extern PointCloud2fDefaultTypeInternal _PointCloud2f_default_instance_;
class Polygon2f;
struct Polygon2fDefaultTypeInternal;
extern Polygon2fDefaultTypeInternal _Polygon2f_default_instance_;
class Polygon2fArray;
struct Polygon2fArrayDefaultTypeInternal;
extern Polygon2fArrayDefaultTypeInternal _Polygon2fArray_default_instance_;
class Pose2f;
struct Pose2fDefaultTypeInternal;
extern Pose2fDefaultTypeInternal _Pose2f_default_instance_;
class Pose2fArray;
struct Pose2fArrayDefaultTypeInternal;
extern Pose2fArrayDefaultTypeInternal _Pose2fArray_default_instance_;
class Transform2fNode;
struct Transform2fNodeDefaultTypeInternal;
extern Transform2fNodeDefaultTypeInternal _Transform2fNode_default_instance_;
class Vector2f;
struct Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
}  // namespace xviz_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::xviz_msgs::Circle2f* Arena::CreateMaybeMessage<::xviz_msgs::Circle2f>(Arena*);
template<> ::xviz_msgs::Circle2fArray* Arena::CreateMaybeMessage<::xviz_msgs::Circle2fArray>(Arena*);
template<> ::xviz_msgs::Header* Arena::CreateMaybeMessage<::xviz_msgs::Header>(Arena*);
template<> ::xviz_msgs::MapDouble* Arena::CreateMaybeMessage<::xviz_msgs::MapDouble>(Arena*);
template<> ::xviz_msgs::MapDouble_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz_msgs::MapDouble_DataEntry_DoNotUse>(Arena*);
template<> ::xviz_msgs::MapString* Arena::CreateMaybeMessage<::xviz_msgs::MapString>(Arena*);
template<> ::xviz_msgs::MapString_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz_msgs::MapString_DataEntry_DoNotUse>(Arena*);
template<> ::xviz_msgs::Marker2f* Arena::CreateMaybeMessage<::xviz_msgs::Marker2f>(Arena*);
template<> ::xviz_msgs::Marker2fArray* Arena::CreateMaybeMessage<::xviz_msgs::Marker2fArray>(Arena*);
template<> ::xviz_msgs::Path2f* Arena::CreateMaybeMessage<::xviz_msgs::Path2f>(Arena*);
template<> ::xviz_msgs::Path2fArray* Arena::CreateMaybeMessage<::xviz_msgs::Path2fArray>(Arena*);
template<> ::xviz_msgs::PointCloud2f* Arena::CreateMaybeMessage<::xviz_msgs::PointCloud2f>(Arena*);
template<> ::xviz_msgs::Polygon2f* Arena::CreateMaybeMessage<::xviz_msgs::Polygon2f>(Arena*);
template<> ::xviz_msgs::Polygon2fArray* Arena::CreateMaybeMessage<::xviz_msgs::Polygon2fArray>(Arena*);
template<> ::xviz_msgs::Pose2f* Arena::CreateMaybeMessage<::xviz_msgs::Pose2f>(Arena*);
template<> ::xviz_msgs::Pose2fArray* Arena::CreateMaybeMessage<::xviz_msgs::Pose2fArray>(Arena*);
template<> ::xviz_msgs::Transform2fNode* Arena::CreateMaybeMessage<::xviz_msgs::Transform2fNode>(Arena*);
template<> ::xviz_msgs::Vector2f* Arena::CreateMaybeMessage<::xviz_msgs::Vector2f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xviz_msgs {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kInfoFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string frameId = 2;
  void clear_frameid();
  const std::string& frameid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frameid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frameid();
  PROTOBUF_NODISCARD std::string* release_frameid();
  void set_allocated_frameid(std::string* frameid);
  private:
  const std::string& _internal_frameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frameid(const std::string& value);
  std::string* _internal_mutable_frameid();
  public:

  // string info = 3;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {}
  ~Vector2f() override;
  explicit constexpr Vector2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Vector2f";
  }
  protected:
  explicit Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Vector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Pose2f) */ {
 public:
  inline Pose2f() : Pose2f(nullptr) {}
  ~Pose2f() override;
  explicit constexpr Pose2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose2f(const Pose2f& from);
  Pose2f(Pose2f&& from) noexcept
    : Pose2f() {
    *this = ::std::move(from);
  }

  inline Pose2f& operator=(const Pose2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2f& operator=(Pose2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose2f* internal_default_instance() {
    return reinterpret_cast<const Pose2f*>(
               &_Pose2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pose2f& a, Pose2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pose2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Pose2f";
  }
  protected:
  explicit Pose2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // .xviz_msgs.Vector2f position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::xviz_msgs::Vector2f& position() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Vector2f* release_position();
  ::xviz_msgs::Vector2f* mutable_position();
  void set_allocated_position(::xviz_msgs::Vector2f* position);
  private:
  const ::xviz_msgs::Vector2f& _internal_position() const;
  ::xviz_msgs::Vector2f* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::xviz_msgs::Vector2f* position);
  ::xviz_msgs::Vector2f* unsafe_arena_release_position();

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Pose2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xviz_msgs::Header* header_;
  ::xviz_msgs::Vector2f* position_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose2fArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Pose2fArray) */ {
 public:
  inline Pose2fArray() : Pose2fArray(nullptr) {}
  ~Pose2fArray() override;
  explicit constexpr Pose2fArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose2fArray(const Pose2fArray& from);
  Pose2fArray(Pose2fArray&& from) noexcept
    : Pose2fArray() {
    *this = ::std::move(from);
  }

  inline Pose2fArray& operator=(const Pose2fArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2fArray& operator=(Pose2fArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose2fArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose2fArray* internal_default_instance() {
    return reinterpret_cast<const Pose2fArray*>(
               &_Pose2fArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pose2fArray& a, Pose2fArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2fArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2fArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose2fArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose2fArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose2fArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pose2fArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2fArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Pose2fArray";
  }
  protected:
  explicit Pose2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseArrayFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .xviz_msgs.Pose2f poseArray = 2;
  int posearray_size() const;
  private:
  int _internal_posearray_size() const;
  public:
  void clear_posearray();
  ::xviz_msgs::Pose2f* mutable_posearray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Pose2f >*
      mutable_posearray();
  private:
  const ::xviz_msgs::Pose2f& _internal_posearray(int index) const;
  ::xviz_msgs::Pose2f* _internal_add_posearray();
  public:
  const ::xviz_msgs::Pose2f& posearray(int index) const;
  ::xviz_msgs::Pose2f* add_posearray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Pose2f >&
      posearray() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:xviz_msgs.Pose2fArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Pose2f > posearray_;
  ::xviz_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Polygon2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Polygon2f) */ {
 public:
  inline Polygon2f() : Polygon2f(nullptr) {}
  ~Polygon2f() override;
  explicit constexpr Polygon2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon2f(const Polygon2f& from);
  Polygon2f(Polygon2f&& from) noexcept
    : Polygon2f() {
    *this = ::std::move(from);
  }

  inline Polygon2f& operator=(const Polygon2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon2f& operator=(Polygon2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon2f* internal_default_instance() {
    return reinterpret_cast<const Polygon2f*>(
               &_Polygon2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Polygon2f& a, Polygon2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Polygon2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Polygon2f";
  }
  protected:
  explicit Polygon2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kFilledFieldNumber = 3,
  };
  // repeated .xviz_msgs.Vector2f points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xviz_msgs::Vector2f* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >*
      mutable_points();
  private:
  const ::xviz_msgs::Vector2f& _internal_points(int index) const;
  ::xviz_msgs::Vector2f* _internal_add_points();
  public:
  const ::xviz_msgs::Vector2f& points(int index) const;
  ::xviz_msgs::Vector2f* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >&
      points() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // bool filled = 3;
  void clear_filled();
  bool filled() const;
  void set_filled(bool value);
  private:
  bool _internal_filled() const;
  void _internal_set_filled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Polygon2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f > points_;
  ::xviz_msgs::Header* header_;
  bool filled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Polygon2fArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Polygon2fArray) */ {
 public:
  inline Polygon2fArray() : Polygon2fArray(nullptr) {}
  ~Polygon2fArray() override;
  explicit constexpr Polygon2fArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon2fArray(const Polygon2fArray& from);
  Polygon2fArray(Polygon2fArray&& from) noexcept
    : Polygon2fArray() {
    *this = ::std::move(from);
  }

  inline Polygon2fArray& operator=(const Polygon2fArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon2fArray& operator=(Polygon2fArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon2fArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon2fArray* internal_default_instance() {
    return reinterpret_cast<const Polygon2fArray*>(
               &_Polygon2fArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Polygon2fArray& a, Polygon2fArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon2fArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon2fArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon2fArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon2fArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon2fArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Polygon2fArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon2fArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Polygon2fArray";
  }
  protected:
  explicit Polygon2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonArrayFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .xviz_msgs.Polygon2f polygonArray = 2;
  int polygonarray_size() const;
  private:
  int _internal_polygonarray_size() const;
  public:
  void clear_polygonarray();
  ::xviz_msgs::Polygon2f* mutable_polygonarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Polygon2f >*
      mutable_polygonarray();
  private:
  const ::xviz_msgs::Polygon2f& _internal_polygonarray(int index) const;
  ::xviz_msgs::Polygon2f* _internal_add_polygonarray();
  public:
  const ::xviz_msgs::Polygon2f& polygonarray(int index) const;
  ::xviz_msgs::Polygon2f* add_polygonarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Polygon2f >&
      polygonarray() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:xviz_msgs.Polygon2fArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Polygon2f > polygonarray_;
  ::xviz_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Path2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Path2f) */ {
 public:
  inline Path2f() : Path2f(nullptr) {}
  ~Path2f() override;
  explicit constexpr Path2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path2f(const Path2f& from);
  Path2f(Path2f&& from) noexcept
    : Path2f() {
    *this = ::std::move(from);
  }

  inline Path2f& operator=(const Path2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path2f& operator=(Path2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path2f* internal_default_instance() {
    return reinterpret_cast<const Path2f*>(
               &_Path2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Path2f& a, Path2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Path2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Path2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Path2f";
  }
  protected:
  explicit Path2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kIsDashedFieldNumber = 3,
  };
  // repeated .xviz_msgs.Vector2f points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xviz_msgs::Vector2f* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >*
      mutable_points();
  private:
  const ::xviz_msgs::Vector2f& _internal_points(int index) const;
  ::xviz_msgs::Vector2f* _internal_add_points();
  public:
  const ::xviz_msgs::Vector2f& points(int index) const;
  ::xviz_msgs::Vector2f* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >&
      points() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // bool isDashed = 3;
  void clear_isdashed();
  bool isdashed() const;
  void set_isdashed(bool value);
  private:
  bool _internal_isdashed() const;
  void _internal_set_isdashed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Path2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f > points_;
  ::xviz_msgs::Header* header_;
  bool isdashed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Path2fArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Path2fArray) */ {
 public:
  inline Path2fArray() : Path2fArray(nullptr) {}
  ~Path2fArray() override;
  explicit constexpr Path2fArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path2fArray(const Path2fArray& from);
  Path2fArray(Path2fArray&& from) noexcept
    : Path2fArray() {
    *this = ::std::move(from);
  }

  inline Path2fArray& operator=(const Path2fArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path2fArray& operator=(Path2fArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path2fArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path2fArray* internal_default_instance() {
    return reinterpret_cast<const Path2fArray*>(
               &_Path2fArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Path2fArray& a, Path2fArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Path2fArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path2fArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path2fArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path2fArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path2fArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Path2fArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path2fArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Path2fArray";
  }
  protected:
  explicit Path2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathArrayFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .xviz_msgs.Path2f pathArray = 2;
  int patharray_size() const;
  private:
  int _internal_patharray_size() const;
  public:
  void clear_patharray();
  ::xviz_msgs::Path2f* mutable_patharray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Path2f >*
      mutable_patharray();
  private:
  const ::xviz_msgs::Path2f& _internal_patharray(int index) const;
  ::xviz_msgs::Path2f* _internal_add_patharray();
  public:
  const ::xviz_msgs::Path2f& patharray(int index) const;
  ::xviz_msgs::Path2f* add_patharray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Path2f >&
      patharray() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:xviz_msgs.Path2fArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Path2f > patharray_;
  ::xviz_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Circle2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Circle2f) */ {
 public:
  inline Circle2f() : Circle2f(nullptr) {}
  ~Circle2f() override;
  explicit constexpr Circle2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Circle2f(const Circle2f& from);
  Circle2f(Circle2f&& from) noexcept
    : Circle2f() {
    *this = ::std::move(from);
  }

  inline Circle2f& operator=(const Circle2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Circle2f& operator=(Circle2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Circle2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Circle2f* internal_default_instance() {
    return reinterpret_cast<const Circle2f*>(
               &_Circle2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Circle2f& a, Circle2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Circle2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Circle2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Circle2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Circle2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Circle2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Circle2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Circle2f";
  }
  protected:
  explicit Circle2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCenterFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kFilledFieldNumber = 4,
  };
  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // .xviz_msgs.Vector2f center = 2;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::xviz_msgs::Vector2f& center() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Vector2f* release_center();
  ::xviz_msgs::Vector2f* mutable_center();
  void set_allocated_center(::xviz_msgs::Vector2f* center);
  private:
  const ::xviz_msgs::Vector2f& _internal_center() const;
  ::xviz_msgs::Vector2f* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::xviz_msgs::Vector2f* center);
  ::xviz_msgs::Vector2f* unsafe_arena_release_center();

  // float radius = 3;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // bool filled = 4;
  void clear_filled();
  bool filled() const;
  void set_filled(bool value);
  private:
  bool _internal_filled() const;
  void _internal_set_filled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Circle2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xviz_msgs::Header* header_;
  ::xviz_msgs::Vector2f* center_;
  float radius_;
  bool filled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Circle2fArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Circle2fArray) */ {
 public:
  inline Circle2fArray() : Circle2fArray(nullptr) {}
  ~Circle2fArray() override;
  explicit constexpr Circle2fArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Circle2fArray(const Circle2fArray& from);
  Circle2fArray(Circle2fArray&& from) noexcept
    : Circle2fArray() {
    *this = ::std::move(from);
  }

  inline Circle2fArray& operator=(const Circle2fArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Circle2fArray& operator=(Circle2fArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Circle2fArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const Circle2fArray* internal_default_instance() {
    return reinterpret_cast<const Circle2fArray*>(
               &_Circle2fArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Circle2fArray& a, Circle2fArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Circle2fArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Circle2fArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Circle2fArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Circle2fArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Circle2fArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Circle2fArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle2fArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Circle2fArray";
  }
  protected:
  explicit Circle2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCircleArrayFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .xviz_msgs.Circle2f circleArray = 2;
  int circlearray_size() const;
  private:
  int _internal_circlearray_size() const;
  public:
  void clear_circlearray();
  ::xviz_msgs::Circle2f* mutable_circlearray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Circle2f >*
      mutable_circlearray();
  private:
  const ::xviz_msgs::Circle2f& _internal_circlearray(int index) const;
  ::xviz_msgs::Circle2f* _internal_add_circlearray();
  public:
  const ::xviz_msgs::Circle2f& circlearray(int index) const;
  ::xviz_msgs::Circle2f* add_circlearray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Circle2f >&
      circlearray() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:xviz_msgs.Circle2fArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Circle2f > circlearray_;
  ::xviz_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointCloud2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.PointCloud2f) */ {
 public:
  inline PointCloud2f() : PointCloud2f(nullptr) {}
  ~PointCloud2f() override;
  explicit constexpr PointCloud2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud2f(const PointCloud2f& from);
  PointCloud2f(PointCloud2f&& from) noexcept
    : PointCloud2f() {
    *this = ::std::move(from);
  }

  inline PointCloud2f& operator=(const PointCloud2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud2f& operator=(PointCloud2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud2f* internal_default_instance() {
    return reinterpret_cast<const PointCloud2f*>(
               &_PointCloud2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PointCloud2f& a, PointCloud2f& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloud2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloud2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointCloud2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointCloud2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.PointCloud2f";
  }
  protected:
  explicit PointCloud2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .xviz_msgs.Vector2f points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xviz_msgs::Vector2f* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >*
      mutable_points();
  private:
  const ::xviz_msgs::Vector2f& _internal_points(int index) const;
  ::xviz_msgs::Vector2f* _internal_add_points();
  public:
  const ::xviz_msgs::Vector2f& points(int index) const;
  ::xviz_msgs::Vector2f* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >&
      points() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:xviz_msgs.PointCloud2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f > points_;
  ::xviz_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Marker2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Marker2f) */ {
 public:
  inline Marker2f() : Marker2f(nullptr) {}
  ~Marker2f() override;
  explicit constexpr Marker2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Marker2f(const Marker2f& from);
  Marker2f(Marker2f&& from) noexcept
    : Marker2f() {
    *this = ::std::move(from);
  }

  inline Marker2f& operator=(const Marker2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker2f& operator=(Marker2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marker2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marker2f* internal_default_instance() {
    return reinterpret_cast<const Marker2f*>(
               &_Marker2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Marker2f& a, Marker2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Marker2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Marker2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Marker2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Marker2f& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Marker2f";
  }
  protected:
  explicit Marker2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kPathFieldNumber = 3,
    kPolygonFieldNumber = 4,
    kCirlceFieldNumber = 5,
    kPoseFieldNumber = 6,
    kPointCloudFieldNumber = 7,
    kTypeFieldNumber = 2,
    kColorTypeFieldNumber = 9,
    kLengthFieldNumber = 10,
    kThicknessFieldNumber = 11,
    kRadiusFieldNumber = 12,
  };
  // string text = 8;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // .xviz_msgs.Path2f path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::xviz_msgs::Path2f& path() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Path2f* release_path();
  ::xviz_msgs::Path2f* mutable_path();
  void set_allocated_path(::xviz_msgs::Path2f* path);
  private:
  const ::xviz_msgs::Path2f& _internal_path() const;
  ::xviz_msgs::Path2f* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::xviz_msgs::Path2f* path);
  ::xviz_msgs::Path2f* unsafe_arena_release_path();

  // .xviz_msgs.Polygon2f polygon = 4;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::xviz_msgs::Polygon2f& polygon() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Polygon2f* release_polygon();
  ::xviz_msgs::Polygon2f* mutable_polygon();
  void set_allocated_polygon(::xviz_msgs::Polygon2f* polygon);
  private:
  const ::xviz_msgs::Polygon2f& _internal_polygon() const;
  ::xviz_msgs::Polygon2f* _internal_mutable_polygon();
  public:
  void unsafe_arena_set_allocated_polygon(
      ::xviz_msgs::Polygon2f* polygon);
  ::xviz_msgs::Polygon2f* unsafe_arena_release_polygon();

  // .xviz_msgs.Circle2f cirlce = 5;
  bool has_cirlce() const;
  private:
  bool _internal_has_cirlce() const;
  public:
  void clear_cirlce();
  const ::xviz_msgs::Circle2f& cirlce() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Circle2f* release_cirlce();
  ::xviz_msgs::Circle2f* mutable_cirlce();
  void set_allocated_cirlce(::xviz_msgs::Circle2f* cirlce);
  private:
  const ::xviz_msgs::Circle2f& _internal_cirlce() const;
  ::xviz_msgs::Circle2f* _internal_mutable_cirlce();
  public:
  void unsafe_arena_set_allocated_cirlce(
      ::xviz_msgs::Circle2f* cirlce);
  ::xviz_msgs::Circle2f* unsafe_arena_release_cirlce();

  // .xviz_msgs.Pose2f pose = 6;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::xviz_msgs::Pose2f& pose() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Pose2f* release_pose();
  ::xviz_msgs::Pose2f* mutable_pose();
  void set_allocated_pose(::xviz_msgs::Pose2f* pose);
  private:
  const ::xviz_msgs::Pose2f& _internal_pose() const;
  ::xviz_msgs::Pose2f* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::xviz_msgs::Pose2f* pose);
  ::xviz_msgs::Pose2f* unsafe_arena_release_pose();

  // .xviz_msgs.PointCloud2f point_cloud = 7;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::xviz_msgs::PointCloud2f& point_cloud() const;
  PROTOBUF_NODISCARD ::xviz_msgs::PointCloud2f* release_point_cloud();
  ::xviz_msgs::PointCloud2f* mutable_point_cloud();
  void set_allocated_point_cloud(::xviz_msgs::PointCloud2f* point_cloud);
  private:
  const ::xviz_msgs::PointCloud2f& _internal_point_cloud() const;
  ::xviz_msgs::PointCloud2f* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::xviz_msgs::PointCloud2f* point_cloud);
  ::xviz_msgs::PointCloud2f* unsafe_arena_release_point_cloud();

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 colorType = 9;
  void clear_colortype();
  uint32_t colortype() const;
  void set_colortype(uint32_t value);
  private:
  uint32_t _internal_colortype() const;
  void _internal_set_colortype(uint32_t value);
  public:

  // float length = 10;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float thickness = 11;
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // float radius = 12;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Marker2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::xviz_msgs::Header* header_;
  ::xviz_msgs::Path2f* path_;
  ::xviz_msgs::Polygon2f* polygon_;
  ::xviz_msgs::Circle2f* cirlce_;
  ::xviz_msgs::Pose2f* pose_;
  ::xviz_msgs::PointCloud2f* point_cloud_;
  uint32_t type_;
  uint32_t colortype_;
  float length_;
  float thickness_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Marker2fArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Marker2fArray) */ {
 public:
  inline Marker2fArray() : Marker2fArray(nullptr) {}
  ~Marker2fArray() override;
  explicit constexpr Marker2fArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Marker2fArray(const Marker2fArray& from);
  Marker2fArray(Marker2fArray&& from) noexcept
    : Marker2fArray() {
    *this = ::std::move(from);
  }

  inline Marker2fArray& operator=(const Marker2fArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker2fArray& operator=(Marker2fArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marker2fArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marker2fArray* internal_default_instance() {
    return reinterpret_cast<const Marker2fArray*>(
               &_Marker2fArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Marker2fArray& a, Marker2fArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker2fArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker2fArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Marker2fArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Marker2fArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Marker2fArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Marker2fArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker2fArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Marker2fArray";
  }
  protected:
  explicit Marker2fArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkerArrayFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .xviz_msgs.Marker2f markerArray = 2;
  int markerarray_size() const;
  private:
  int _internal_markerarray_size() const;
  public:
  void clear_markerarray();
  ::xviz_msgs::Marker2f* mutable_markerarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Marker2f >*
      mutable_markerarray();
  private:
  const ::xviz_msgs::Marker2f& _internal_markerarray(int index) const;
  ::xviz_msgs::Marker2f* _internal_add_markerarray();
  public:
  const ::xviz_msgs::Marker2f& markerarray(int index) const;
  ::xviz_msgs::Marker2f* add_markerarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Marker2f >&
      markerarray() const;

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:xviz_msgs.Marker2fArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Marker2f > markerarray_;
  ::xviz_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Transform2fNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.Transform2fNode) */ {
 public:
  inline Transform2fNode() : Transform2fNode(nullptr) {}
  ~Transform2fNode() override;
  explicit constexpr Transform2fNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform2fNode(const Transform2fNode& from);
  Transform2fNode(Transform2fNode&& from) noexcept
    : Transform2fNode() {
    *this = ::std::move(from);
  }

  inline Transform2fNode& operator=(const Transform2fNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform2fNode& operator=(Transform2fNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform2fNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform2fNode* internal_default_instance() {
    return reinterpret_cast<const Transform2fNode*>(
               &_Transform2fNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Transform2fNode& a, Transform2fNode& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform2fNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform2fNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform2fNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform2fNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform2fNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transform2fNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform2fNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.Transform2fNode";
  }
  protected:
  explicit Transform2fNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 4,
    kParentFrameIdFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kTransFieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // string frameId = 4;
  void clear_frameid();
  const std::string& frameid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frameid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frameid();
  PROTOBUF_NODISCARD std::string* release_frameid();
  void set_allocated_frameid(std::string* frameid);
  private:
  const std::string& _internal_frameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frameid(const std::string& value);
  std::string* _internal_mutable_frameid();
  public:

  // string parentFrameId = 5;
  void clear_parentframeid();
  const std::string& parentframeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentframeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentframeid();
  PROTOBUF_NODISCARD std::string* release_parentframeid();
  void set_allocated_parentframeid(std::string* parentframeid);
  private:
  const std::string& _internal_parentframeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentframeid(const std::string& value);
  std::string* _internal_mutable_parentframeid();
  public:

  // .xviz_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::xviz_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Header* release_header();
  ::xviz_msgs::Header* mutable_header();
  void set_allocated_header(::xviz_msgs::Header* header);
  private:
  const ::xviz_msgs::Header& _internal_header() const;
  ::xviz_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::xviz_msgs::Header* header);
  ::xviz_msgs::Header* unsafe_arena_release_header();

  // .xviz_msgs.Vector2f trans = 2;
  bool has_trans() const;
  private:
  bool _internal_has_trans() const;
  public:
  void clear_trans();
  const ::xviz_msgs::Vector2f& trans() const;
  PROTOBUF_NODISCARD ::xviz_msgs::Vector2f* release_trans();
  ::xviz_msgs::Vector2f* mutable_trans();
  void set_allocated_trans(::xviz_msgs::Vector2f* trans);
  private:
  const ::xviz_msgs::Vector2f& _internal_trans() const;
  ::xviz_msgs::Vector2f* _internal_mutable_trans();
  public:
  void unsafe_arena_set_allocated_trans(
      ::xviz_msgs::Vector2f* trans);
  ::xviz_msgs::Vector2f* unsafe_arena_release_trans();

  // float angle = 3;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.Transform2fNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentframeid_;
  ::xviz_msgs::Header* header_;
  ::xviz_msgs::Vector2f* trans_;
  float angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MapDouble_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapDouble_DataEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapDouble_DataEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  MapDouble_DataEntry_DoNotUse();
  explicit constexpr MapDouble_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapDouble_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapDouble_DataEntry_DoNotUse& other);
  static const MapDouble_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapDouble_DataEntry_DoNotUse*>(&_MapDouble_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz_msgs.MapDouble.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class MapDouble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.MapDouble) */ {
 public:
  inline MapDouble() : MapDouble(nullptr) {}
  ~MapDouble() override;
  explicit constexpr MapDouble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapDouble(const MapDouble& from);
  MapDouble(MapDouble&& from) noexcept
    : MapDouble() {
    *this = ::std::move(from);
  }

  inline MapDouble& operator=(const MapDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapDouble& operator=(MapDouble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapDouble& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapDouble* internal_default_instance() {
    return reinterpret_cast<const MapDouble*>(
               &_MapDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MapDouble& a, MapDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(MapDouble* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapDouble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapDouble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapDouble& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapDouble* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.MapDouble";
  }
  protected:
  explicit MapDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTFieldNumber = 2,
  };
  // map<string, double> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_data();

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // @@protoc_insertion_point(class_scope:xviz_msgs.MapDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapDouble_DataEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> data_;
  double t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MapString_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapString_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapString_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MapString_DataEntry_DoNotUse();
  explicit constexpr MapString_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapString_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapString_DataEntry_DoNotUse& other);
  static const MapString_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapString_DataEntry_DoNotUse*>(&_MapString_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz_msgs.MapString.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz_msgs.MapString.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class MapString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz_msgs.MapString) */ {
 public:
  inline MapString() : MapString(nullptr) {}
  ~MapString() override;
  explicit constexpr MapString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapString(const MapString& from);
  MapString(MapString&& from) noexcept
    : MapString() {
    *this = ::std::move(from);
  }

  inline MapString& operator=(const MapString& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapString& operator=(MapString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapString& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapString* internal_default_instance() {
    return reinterpret_cast<const MapString*>(
               &_MapString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MapString& a, MapString& b) {
    a.Swap(&b);
  }
  inline void Swap(MapString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz_msgs.MapString";
  }
  protected:
  explicit MapString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, string> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:xviz_msgs.MapString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapString_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string name = 1;
inline void Header::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Header::name() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Header.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz_msgs.Header.name)
}
inline std::string* Header::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Header.name)
  return _s;
}
inline const std::string& Header::_internal_name() const {
  return name_.Get();
}
inline void Header::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_name() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Header.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Header.name)
}

// string frameId = 2;
inline void Header::clear_frameid() {
  frameid_.ClearToEmpty();
}
inline const std::string& Header::frameid() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Header.frameId)
  return _internal_frameid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_frameid(ArgT0&& arg0, ArgT... args) {
 
 frameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz_msgs.Header.frameId)
}
inline std::string* Header::mutable_frameid() {
  std::string* _s = _internal_mutable_frameid();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Header.frameId)
  return _s;
}
inline const std::string& Header::_internal_frameid() const {
  return frameid_.Get();
}
inline void Header::_internal_set_frameid(const std::string& value) {
  
  frameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_frameid() {
  
  return frameid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_frameid() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Header.frameId)
  return frameid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_frameid(std::string* frameid) {
  if (frameid != nullptr) {
    
  } else {
    
  }
  frameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frameid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    frameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Header.frameId)
}

// string info = 3;
inline void Header::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& Header::info() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Header.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_info(ArgT0&& arg0, ArgT... args) {
 
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz_msgs.Header.info)
}
inline std::string* Header::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Header.info)
  return _s;
}
inline const std::string& Header::_internal_info() const {
  return info_.Get();
}
inline void Header::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_info() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Header.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Header.info)
}

// -------------------------------------------------------------------

// Vector2f

// float x = 1;
inline void Vector2f::clear_x() {
  x_ = 0;
}
inline float Vector2f::_internal_x() const {
  return x_;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Vector2f.x)
  return _internal_x();
}
inline void Vector2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Vector2f.x)
}

// float y = 2;
inline void Vector2f::clear_y() {
  y_ = 0;
}
inline float Vector2f::_internal_y() const {
  return y_;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Vector2f.y)
  return _internal_y();
}
inline void Vector2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Vector2f.y)
}

// -------------------------------------------------------------------

// Pose2f

// .xviz_msgs.Header header = 1;
inline bool Pose2f::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Pose2f::has_header() const {
  return _internal_has_header();
}
inline void Pose2f::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Pose2f::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Pose2f::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Pose2f.header)
  return _internal_header();
}
inline void Pose2f::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Pose2f.header)
}
inline ::xviz_msgs::Header* Pose2f::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Pose2f::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Pose2f.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Pose2f::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Pose2f::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Pose2f.header)
  return _msg;
}
inline void Pose2f::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Pose2f.header)
}

// .xviz_msgs.Vector2f position = 2;
inline bool Pose2f::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose2f::has_position() const {
  return _internal_has_position();
}
inline void Pose2f::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::xviz_msgs::Vector2f& Pose2f::_internal_position() const {
  const ::xviz_msgs::Vector2f* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Vector2f&>(
      ::xviz_msgs::_Vector2f_default_instance_);
}
inline const ::xviz_msgs::Vector2f& Pose2f::position() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Pose2f.position)
  return _internal_position();
}
inline void Pose2f::unsafe_arena_set_allocated_position(
    ::xviz_msgs::Vector2f* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Pose2f.position)
}
inline ::xviz_msgs::Vector2f* Pose2f::release_position() {
  
  ::xviz_msgs::Vector2f* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Vector2f* Pose2f::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Pose2f.position)
  
  ::xviz_msgs::Vector2f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Vector2f* Pose2f::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Vector2f>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::xviz_msgs::Vector2f* Pose2f::mutable_position() {
  ::xviz_msgs::Vector2f* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Pose2f.position)
  return _msg;
}
inline void Pose2f::set_allocated_position(::xviz_msgs::Vector2f* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Vector2f>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Pose2f.position)
}

// float yaw = 3;
inline void Pose2f::clear_yaw() {
  yaw_ = 0;
}
inline float Pose2f::_internal_yaw() const {
  return yaw_;
}
inline float Pose2f::yaw() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Pose2f.yaw)
  return _internal_yaw();
}
inline void Pose2f::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Pose2f::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Pose2f.yaw)
}

// -------------------------------------------------------------------

// Pose2fArray

// .xviz_msgs.Header header = 1;
inline bool Pose2fArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Pose2fArray::has_header() const {
  return _internal_has_header();
}
inline void Pose2fArray::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Pose2fArray::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Pose2fArray::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Pose2fArray.header)
  return _internal_header();
}
inline void Pose2fArray::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Pose2fArray.header)
}
inline ::xviz_msgs::Header* Pose2fArray::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Pose2fArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Pose2fArray.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Pose2fArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Pose2fArray::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Pose2fArray.header)
  return _msg;
}
inline void Pose2fArray::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Pose2fArray.header)
}

// repeated .xviz_msgs.Pose2f poseArray = 2;
inline int Pose2fArray::_internal_posearray_size() const {
  return posearray_.size();
}
inline int Pose2fArray::posearray_size() const {
  return _internal_posearray_size();
}
inline void Pose2fArray::clear_posearray() {
  posearray_.Clear();
}
inline ::xviz_msgs::Pose2f* Pose2fArray::mutable_posearray(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Pose2fArray.poseArray)
  return posearray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Pose2f >*
Pose2fArray::mutable_posearray() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Pose2fArray.poseArray)
  return &posearray_;
}
inline const ::xviz_msgs::Pose2f& Pose2fArray::_internal_posearray(int index) const {
  return posearray_.Get(index);
}
inline const ::xviz_msgs::Pose2f& Pose2fArray::posearray(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Pose2fArray.poseArray)
  return _internal_posearray(index);
}
inline ::xviz_msgs::Pose2f* Pose2fArray::_internal_add_posearray() {
  return posearray_.Add();
}
inline ::xviz_msgs::Pose2f* Pose2fArray::add_posearray() {
  ::xviz_msgs::Pose2f* _add = _internal_add_posearray();
  // @@protoc_insertion_point(field_add:xviz_msgs.Pose2fArray.poseArray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Pose2f >&
Pose2fArray::posearray() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Pose2fArray.poseArray)
  return posearray_;
}

// -------------------------------------------------------------------

// Polygon2f

// .xviz_msgs.Header header = 1;
inline bool Polygon2f::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Polygon2f::has_header() const {
  return _internal_has_header();
}
inline void Polygon2f::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Polygon2f::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Polygon2f::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Polygon2f.header)
  return _internal_header();
}
inline void Polygon2f::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Polygon2f.header)
}
inline ::xviz_msgs::Header* Polygon2f::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Polygon2f::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Polygon2f.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Polygon2f::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Polygon2f::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Polygon2f.header)
  return _msg;
}
inline void Polygon2f::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Polygon2f.header)
}

// repeated .xviz_msgs.Vector2f points = 2;
inline int Polygon2f::_internal_points_size() const {
  return points_.size();
}
inline int Polygon2f::points_size() const {
  return _internal_points_size();
}
inline void Polygon2f::clear_points() {
  points_.Clear();
}
inline ::xviz_msgs::Vector2f* Polygon2f::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Polygon2f.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >*
Polygon2f::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Polygon2f.points)
  return &points_;
}
inline const ::xviz_msgs::Vector2f& Polygon2f::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xviz_msgs::Vector2f& Polygon2f::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Polygon2f.points)
  return _internal_points(index);
}
inline ::xviz_msgs::Vector2f* Polygon2f::_internal_add_points() {
  return points_.Add();
}
inline ::xviz_msgs::Vector2f* Polygon2f::add_points() {
  ::xviz_msgs::Vector2f* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:xviz_msgs.Polygon2f.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >&
Polygon2f::points() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Polygon2f.points)
  return points_;
}

// bool filled = 3;
inline void Polygon2f::clear_filled() {
  filled_ = false;
}
inline bool Polygon2f::_internal_filled() const {
  return filled_;
}
inline bool Polygon2f::filled() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Polygon2f.filled)
  return _internal_filled();
}
inline void Polygon2f::_internal_set_filled(bool value) {
  
  filled_ = value;
}
inline void Polygon2f::set_filled(bool value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Polygon2f.filled)
}

// -------------------------------------------------------------------

// Polygon2fArray

// .xviz_msgs.Header header = 1;
inline bool Polygon2fArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Polygon2fArray::has_header() const {
  return _internal_has_header();
}
inline void Polygon2fArray::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Polygon2fArray::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Polygon2fArray::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Polygon2fArray.header)
  return _internal_header();
}
inline void Polygon2fArray::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Polygon2fArray.header)
}
inline ::xviz_msgs::Header* Polygon2fArray::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Polygon2fArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Polygon2fArray.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Polygon2fArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Polygon2fArray::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Polygon2fArray.header)
  return _msg;
}
inline void Polygon2fArray::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Polygon2fArray.header)
}

// repeated .xviz_msgs.Polygon2f polygonArray = 2;
inline int Polygon2fArray::_internal_polygonarray_size() const {
  return polygonarray_.size();
}
inline int Polygon2fArray::polygonarray_size() const {
  return _internal_polygonarray_size();
}
inline void Polygon2fArray::clear_polygonarray() {
  polygonarray_.Clear();
}
inline ::xviz_msgs::Polygon2f* Polygon2fArray::mutable_polygonarray(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Polygon2fArray.polygonArray)
  return polygonarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Polygon2f >*
Polygon2fArray::mutable_polygonarray() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Polygon2fArray.polygonArray)
  return &polygonarray_;
}
inline const ::xviz_msgs::Polygon2f& Polygon2fArray::_internal_polygonarray(int index) const {
  return polygonarray_.Get(index);
}
inline const ::xviz_msgs::Polygon2f& Polygon2fArray::polygonarray(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Polygon2fArray.polygonArray)
  return _internal_polygonarray(index);
}
inline ::xviz_msgs::Polygon2f* Polygon2fArray::_internal_add_polygonarray() {
  return polygonarray_.Add();
}
inline ::xviz_msgs::Polygon2f* Polygon2fArray::add_polygonarray() {
  ::xviz_msgs::Polygon2f* _add = _internal_add_polygonarray();
  // @@protoc_insertion_point(field_add:xviz_msgs.Polygon2fArray.polygonArray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Polygon2f >&
Polygon2fArray::polygonarray() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Polygon2fArray.polygonArray)
  return polygonarray_;
}

// -------------------------------------------------------------------

// Path2f

// .xviz_msgs.Header header = 1;
inline bool Path2f::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Path2f::has_header() const {
  return _internal_has_header();
}
inline void Path2f::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Path2f::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Path2f::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Path2f.header)
  return _internal_header();
}
inline void Path2f::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Path2f.header)
}
inline ::xviz_msgs::Header* Path2f::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Path2f::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Path2f.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Path2f::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Path2f::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Path2f.header)
  return _msg;
}
inline void Path2f::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Path2f.header)
}

// repeated .xviz_msgs.Vector2f points = 2;
inline int Path2f::_internal_points_size() const {
  return points_.size();
}
inline int Path2f::points_size() const {
  return _internal_points_size();
}
inline void Path2f::clear_points() {
  points_.Clear();
}
inline ::xviz_msgs::Vector2f* Path2f::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Path2f.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >*
Path2f::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Path2f.points)
  return &points_;
}
inline const ::xviz_msgs::Vector2f& Path2f::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xviz_msgs::Vector2f& Path2f::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Path2f.points)
  return _internal_points(index);
}
inline ::xviz_msgs::Vector2f* Path2f::_internal_add_points() {
  return points_.Add();
}
inline ::xviz_msgs::Vector2f* Path2f::add_points() {
  ::xviz_msgs::Vector2f* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:xviz_msgs.Path2f.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >&
Path2f::points() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Path2f.points)
  return points_;
}

// bool isDashed = 3;
inline void Path2f::clear_isdashed() {
  isdashed_ = false;
}
inline bool Path2f::_internal_isdashed() const {
  return isdashed_;
}
inline bool Path2f::isdashed() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Path2f.isDashed)
  return _internal_isdashed();
}
inline void Path2f::_internal_set_isdashed(bool value) {
  
  isdashed_ = value;
}
inline void Path2f::set_isdashed(bool value) {
  _internal_set_isdashed(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Path2f.isDashed)
}

// -------------------------------------------------------------------

// Path2fArray

// .xviz_msgs.Header header = 1;
inline bool Path2fArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Path2fArray::has_header() const {
  return _internal_has_header();
}
inline void Path2fArray::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Path2fArray::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Path2fArray::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Path2fArray.header)
  return _internal_header();
}
inline void Path2fArray::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Path2fArray.header)
}
inline ::xviz_msgs::Header* Path2fArray::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Path2fArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Path2fArray.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Path2fArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Path2fArray::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Path2fArray.header)
  return _msg;
}
inline void Path2fArray::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Path2fArray.header)
}

// repeated .xviz_msgs.Path2f pathArray = 2;
inline int Path2fArray::_internal_patharray_size() const {
  return patharray_.size();
}
inline int Path2fArray::patharray_size() const {
  return _internal_patharray_size();
}
inline void Path2fArray::clear_patharray() {
  patharray_.Clear();
}
inline ::xviz_msgs::Path2f* Path2fArray::mutable_patharray(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Path2fArray.pathArray)
  return patharray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Path2f >*
Path2fArray::mutable_patharray() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Path2fArray.pathArray)
  return &patharray_;
}
inline const ::xviz_msgs::Path2f& Path2fArray::_internal_patharray(int index) const {
  return patharray_.Get(index);
}
inline const ::xviz_msgs::Path2f& Path2fArray::patharray(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Path2fArray.pathArray)
  return _internal_patharray(index);
}
inline ::xviz_msgs::Path2f* Path2fArray::_internal_add_patharray() {
  return patharray_.Add();
}
inline ::xviz_msgs::Path2f* Path2fArray::add_patharray() {
  ::xviz_msgs::Path2f* _add = _internal_add_patharray();
  // @@protoc_insertion_point(field_add:xviz_msgs.Path2fArray.pathArray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Path2f >&
Path2fArray::patharray() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Path2fArray.pathArray)
  return patharray_;
}

// -------------------------------------------------------------------

// Circle2f

// .xviz_msgs.Header header = 1;
inline bool Circle2f::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Circle2f::has_header() const {
  return _internal_has_header();
}
inline void Circle2f::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Circle2f::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Circle2f::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Circle2f.header)
  return _internal_header();
}
inline void Circle2f::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Circle2f.header)
}
inline ::xviz_msgs::Header* Circle2f::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Circle2f::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Circle2f.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Circle2f::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Circle2f::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Circle2f.header)
  return _msg;
}
inline void Circle2f::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Circle2f.header)
}

// .xviz_msgs.Vector2f center = 2;
inline bool Circle2f::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Circle2f::has_center() const {
  return _internal_has_center();
}
inline void Circle2f::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::xviz_msgs::Vector2f& Circle2f::_internal_center() const {
  const ::xviz_msgs::Vector2f* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Vector2f&>(
      ::xviz_msgs::_Vector2f_default_instance_);
}
inline const ::xviz_msgs::Vector2f& Circle2f::center() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Circle2f.center)
  return _internal_center();
}
inline void Circle2f::unsafe_arena_set_allocated_center(
    ::xviz_msgs::Vector2f* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Circle2f.center)
}
inline ::xviz_msgs::Vector2f* Circle2f::release_center() {
  
  ::xviz_msgs::Vector2f* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Vector2f* Circle2f::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Circle2f.center)
  
  ::xviz_msgs::Vector2f* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Vector2f* Circle2f::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Vector2f>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::xviz_msgs::Vector2f* Circle2f::mutable_center() {
  ::xviz_msgs::Vector2f* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Circle2f.center)
  return _msg;
}
inline void Circle2f::set_allocated_center(::xviz_msgs::Vector2f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Vector2f>::GetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Circle2f.center)
}

// float radius = 3;
inline void Circle2f::clear_radius() {
  radius_ = 0;
}
inline float Circle2f::_internal_radius() const {
  return radius_;
}
inline float Circle2f::radius() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Circle2f.radius)
  return _internal_radius();
}
inline void Circle2f::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void Circle2f::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Circle2f.radius)
}

// bool filled = 4;
inline void Circle2f::clear_filled() {
  filled_ = false;
}
inline bool Circle2f::_internal_filled() const {
  return filled_;
}
inline bool Circle2f::filled() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Circle2f.filled)
  return _internal_filled();
}
inline void Circle2f::_internal_set_filled(bool value) {
  
  filled_ = value;
}
inline void Circle2f::set_filled(bool value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Circle2f.filled)
}

// -------------------------------------------------------------------

// Circle2fArray

// .xviz_msgs.Header header = 1;
inline bool Circle2fArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Circle2fArray::has_header() const {
  return _internal_has_header();
}
inline void Circle2fArray::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Circle2fArray::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Circle2fArray::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Circle2fArray.header)
  return _internal_header();
}
inline void Circle2fArray::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Circle2fArray.header)
}
inline ::xviz_msgs::Header* Circle2fArray::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Circle2fArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Circle2fArray.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Circle2fArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Circle2fArray::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Circle2fArray.header)
  return _msg;
}
inline void Circle2fArray::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Circle2fArray.header)
}

// repeated .xviz_msgs.Circle2f circleArray = 2;
inline int Circle2fArray::_internal_circlearray_size() const {
  return circlearray_.size();
}
inline int Circle2fArray::circlearray_size() const {
  return _internal_circlearray_size();
}
inline void Circle2fArray::clear_circlearray() {
  circlearray_.Clear();
}
inline ::xviz_msgs::Circle2f* Circle2fArray::mutable_circlearray(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Circle2fArray.circleArray)
  return circlearray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Circle2f >*
Circle2fArray::mutable_circlearray() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Circle2fArray.circleArray)
  return &circlearray_;
}
inline const ::xviz_msgs::Circle2f& Circle2fArray::_internal_circlearray(int index) const {
  return circlearray_.Get(index);
}
inline const ::xviz_msgs::Circle2f& Circle2fArray::circlearray(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Circle2fArray.circleArray)
  return _internal_circlearray(index);
}
inline ::xviz_msgs::Circle2f* Circle2fArray::_internal_add_circlearray() {
  return circlearray_.Add();
}
inline ::xviz_msgs::Circle2f* Circle2fArray::add_circlearray() {
  ::xviz_msgs::Circle2f* _add = _internal_add_circlearray();
  // @@protoc_insertion_point(field_add:xviz_msgs.Circle2fArray.circleArray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Circle2f >&
Circle2fArray::circlearray() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Circle2fArray.circleArray)
  return circlearray_;
}

// -------------------------------------------------------------------

// PointCloud2f

// .xviz_msgs.Header header = 1;
inline bool PointCloud2f::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PointCloud2f::has_header() const {
  return _internal_has_header();
}
inline void PointCloud2f::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& PointCloud2f::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& PointCloud2f::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.PointCloud2f.header)
  return _internal_header();
}
inline void PointCloud2f::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.PointCloud2f.header)
}
inline ::xviz_msgs::Header* PointCloud2f::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* PointCloud2f::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.PointCloud2f.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* PointCloud2f::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* PointCloud2f::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.PointCloud2f.header)
  return _msg;
}
inline void PointCloud2f::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.PointCloud2f.header)
}

// repeated .xviz_msgs.Vector2f points = 2;
inline int PointCloud2f::_internal_points_size() const {
  return points_.size();
}
inline int PointCloud2f::points_size() const {
  return _internal_points_size();
}
inline void PointCloud2f::clear_points() {
  points_.Clear();
}
inline ::xviz_msgs::Vector2f* PointCloud2f::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.PointCloud2f.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >*
PointCloud2f::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.PointCloud2f.points)
  return &points_;
}
inline const ::xviz_msgs::Vector2f& PointCloud2f::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xviz_msgs::Vector2f& PointCloud2f::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.PointCloud2f.points)
  return _internal_points(index);
}
inline ::xviz_msgs::Vector2f* PointCloud2f::_internal_add_points() {
  return points_.Add();
}
inline ::xviz_msgs::Vector2f* PointCloud2f::add_points() {
  ::xviz_msgs::Vector2f* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:xviz_msgs.PointCloud2f.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Vector2f >&
PointCloud2f::points() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.PointCloud2f.points)
  return points_;
}

// -------------------------------------------------------------------

// Marker2f

// .xviz_msgs.Header header = 1;
inline bool Marker2f::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Marker2f::has_header() const {
  return _internal_has_header();
}
inline void Marker2f::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Marker2f::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Marker2f::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.header)
  return _internal_header();
}
inline void Marker2f::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2f.header)
}
inline ::xviz_msgs::Header* Marker2f::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Marker2f::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Marker2f::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Marker2f::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.header)
  return _msg;
}
inline void Marker2f::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.header)
}

// uint32 type = 2;
inline void Marker2f::clear_type() {
  type_ = 0u;
}
inline uint32_t Marker2f::_internal_type() const {
  return type_;
}
inline uint32_t Marker2f::type() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.type)
  return _internal_type();
}
inline void Marker2f::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void Marker2f::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Marker2f.type)
}

// .xviz_msgs.Path2f path = 3;
inline bool Marker2f::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool Marker2f::has_path() const {
  return _internal_has_path();
}
inline void Marker2f::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::xviz_msgs::Path2f& Marker2f::_internal_path() const {
  const ::xviz_msgs::Path2f* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Path2f&>(
      ::xviz_msgs::_Path2f_default_instance_);
}
inline const ::xviz_msgs::Path2f& Marker2f::path() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.path)
  return _internal_path();
}
inline void Marker2f::unsafe_arena_set_allocated_path(
    ::xviz_msgs::Path2f* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2f.path)
}
inline ::xviz_msgs::Path2f* Marker2f::release_path() {
  
  ::xviz_msgs::Path2f* temp = path_;
  path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Path2f* Marker2f::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.path)
  
  ::xviz_msgs::Path2f* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Path2f* Marker2f::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Path2f>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::xviz_msgs::Path2f* Marker2f::mutable_path() {
  ::xviz_msgs::Path2f* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.path)
  return _msg;
}
inline void Marker2f::set_allocated_path(::xviz_msgs::Path2f* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Path2f>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.path)
}

// .xviz_msgs.Polygon2f polygon = 4;
inline bool Marker2f::_internal_has_polygon() const {
  return this != internal_default_instance() && polygon_ != nullptr;
}
inline bool Marker2f::has_polygon() const {
  return _internal_has_polygon();
}
inline void Marker2f::clear_polygon() {
  if (GetArenaForAllocation() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
}
inline const ::xviz_msgs::Polygon2f& Marker2f::_internal_polygon() const {
  const ::xviz_msgs::Polygon2f* p = polygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Polygon2f&>(
      ::xviz_msgs::_Polygon2f_default_instance_);
}
inline const ::xviz_msgs::Polygon2f& Marker2f::polygon() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.polygon)
  return _internal_polygon();
}
inline void Marker2f::unsafe_arena_set_allocated_polygon(
    ::xviz_msgs::Polygon2f* polygon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  polygon_ = polygon;
  if (polygon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2f.polygon)
}
inline ::xviz_msgs::Polygon2f* Marker2f::release_polygon() {
  
  ::xviz_msgs::Polygon2f* temp = polygon_;
  polygon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Polygon2f* Marker2f::unsafe_arena_release_polygon() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.polygon)
  
  ::xviz_msgs::Polygon2f* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Polygon2f* Marker2f::_internal_mutable_polygon() {
  
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Polygon2f>(GetArenaForAllocation());
    polygon_ = p;
  }
  return polygon_;
}
inline ::xviz_msgs::Polygon2f* Marker2f::mutable_polygon() {
  ::xviz_msgs::Polygon2f* _msg = _internal_mutable_polygon();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.polygon)
  return _msg;
}
inline void Marker2f::set_allocated_polygon(::xviz_msgs::Polygon2f* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete polygon_;
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Polygon2f>::GetOwningArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    
  } else {
    
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.polygon)
}

// .xviz_msgs.Circle2f cirlce = 5;
inline bool Marker2f::_internal_has_cirlce() const {
  return this != internal_default_instance() && cirlce_ != nullptr;
}
inline bool Marker2f::has_cirlce() const {
  return _internal_has_cirlce();
}
inline void Marker2f::clear_cirlce() {
  if (GetArenaForAllocation() == nullptr && cirlce_ != nullptr) {
    delete cirlce_;
  }
  cirlce_ = nullptr;
}
inline const ::xviz_msgs::Circle2f& Marker2f::_internal_cirlce() const {
  const ::xviz_msgs::Circle2f* p = cirlce_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Circle2f&>(
      ::xviz_msgs::_Circle2f_default_instance_);
}
inline const ::xviz_msgs::Circle2f& Marker2f::cirlce() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.cirlce)
  return _internal_cirlce();
}
inline void Marker2f::unsafe_arena_set_allocated_cirlce(
    ::xviz_msgs::Circle2f* cirlce) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cirlce_);
  }
  cirlce_ = cirlce;
  if (cirlce) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2f.cirlce)
}
inline ::xviz_msgs::Circle2f* Marker2f::release_cirlce() {
  
  ::xviz_msgs::Circle2f* temp = cirlce_;
  cirlce_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Circle2f* Marker2f::unsafe_arena_release_cirlce() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.cirlce)
  
  ::xviz_msgs::Circle2f* temp = cirlce_;
  cirlce_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Circle2f* Marker2f::_internal_mutable_cirlce() {
  
  if (cirlce_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Circle2f>(GetArenaForAllocation());
    cirlce_ = p;
  }
  return cirlce_;
}
inline ::xviz_msgs::Circle2f* Marker2f::mutable_cirlce() {
  ::xviz_msgs::Circle2f* _msg = _internal_mutable_cirlce();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.cirlce)
  return _msg;
}
inline void Marker2f::set_allocated_cirlce(::xviz_msgs::Circle2f* cirlce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cirlce_;
  }
  if (cirlce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Circle2f>::GetOwningArena(cirlce);
    if (message_arena != submessage_arena) {
      cirlce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cirlce, submessage_arena);
    }
    
  } else {
    
  }
  cirlce_ = cirlce;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.cirlce)
}

// .xviz_msgs.Pose2f pose = 6;
inline bool Marker2f::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Marker2f::has_pose() const {
  return _internal_has_pose();
}
inline void Marker2f::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::xviz_msgs::Pose2f& Marker2f::_internal_pose() const {
  const ::xviz_msgs::Pose2f* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Pose2f&>(
      ::xviz_msgs::_Pose2f_default_instance_);
}
inline const ::xviz_msgs::Pose2f& Marker2f::pose() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.pose)
  return _internal_pose();
}
inline void Marker2f::unsafe_arena_set_allocated_pose(
    ::xviz_msgs::Pose2f* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2f.pose)
}
inline ::xviz_msgs::Pose2f* Marker2f::release_pose() {
  
  ::xviz_msgs::Pose2f* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Pose2f* Marker2f::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.pose)
  
  ::xviz_msgs::Pose2f* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Pose2f* Marker2f::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Pose2f>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::xviz_msgs::Pose2f* Marker2f::mutable_pose() {
  ::xviz_msgs::Pose2f* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.pose)
  return _msg;
}
inline void Marker2f::set_allocated_pose(::xviz_msgs::Pose2f* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Pose2f>::GetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.pose)
}

// .xviz_msgs.PointCloud2f point_cloud = 7;
inline bool Marker2f::_internal_has_point_cloud() const {
  return this != internal_default_instance() && point_cloud_ != nullptr;
}
inline bool Marker2f::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline void Marker2f::clear_point_cloud() {
  if (GetArenaForAllocation() == nullptr && point_cloud_ != nullptr) {
    delete point_cloud_;
  }
  point_cloud_ = nullptr;
}
inline const ::xviz_msgs::PointCloud2f& Marker2f::_internal_point_cloud() const {
  const ::xviz_msgs::PointCloud2f* p = point_cloud_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::PointCloud2f&>(
      ::xviz_msgs::_PointCloud2f_default_instance_);
}
inline const ::xviz_msgs::PointCloud2f& Marker2f::point_cloud() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.point_cloud)
  return _internal_point_cloud();
}
inline void Marker2f::unsafe_arena_set_allocated_point_cloud(
    ::xviz_msgs::PointCloud2f* point_cloud) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud_);
  }
  point_cloud_ = point_cloud;
  if (point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2f.point_cloud)
}
inline ::xviz_msgs::PointCloud2f* Marker2f::release_point_cloud() {
  
  ::xviz_msgs::PointCloud2f* temp = point_cloud_;
  point_cloud_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::PointCloud2f* Marker2f::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.point_cloud)
  
  ::xviz_msgs::PointCloud2f* temp = point_cloud_;
  point_cloud_ = nullptr;
  return temp;
}
inline ::xviz_msgs::PointCloud2f* Marker2f::_internal_mutable_point_cloud() {
  
  if (point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::PointCloud2f>(GetArenaForAllocation());
    point_cloud_ = p;
  }
  return point_cloud_;
}
inline ::xviz_msgs::PointCloud2f* Marker2f::mutable_point_cloud() {
  ::xviz_msgs::PointCloud2f* _msg = _internal_mutable_point_cloud();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.point_cloud)
  return _msg;
}
inline void Marker2f::set_allocated_point_cloud(::xviz_msgs::PointCloud2f* point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete point_cloud_;
  }
  if (point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::PointCloud2f>::GetOwningArena(point_cloud);
    if (message_arena != submessage_arena) {
      point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  point_cloud_ = point_cloud;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.point_cloud)
}

// string text = 8;
inline void Marker2f::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Marker2f::text() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker2f::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz_msgs.Marker2f.text)
}
inline std::string* Marker2f::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2f.text)
  return _s;
}
inline const std::string& Marker2f::_internal_text() const {
  return text_.Get();
}
inline void Marker2f::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker2f::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker2f::release_text() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2f.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker2f::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2f.text)
}

// uint32 colorType = 9;
inline void Marker2f::clear_colortype() {
  colortype_ = 0u;
}
inline uint32_t Marker2f::_internal_colortype() const {
  return colortype_;
}
inline uint32_t Marker2f::colortype() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.colorType)
  return _internal_colortype();
}
inline void Marker2f::_internal_set_colortype(uint32_t value) {
  
  colortype_ = value;
}
inline void Marker2f::set_colortype(uint32_t value) {
  _internal_set_colortype(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Marker2f.colorType)
}

// float length = 10;
inline void Marker2f::clear_length() {
  length_ = 0;
}
inline float Marker2f::_internal_length() const {
  return length_;
}
inline float Marker2f::length() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.length)
  return _internal_length();
}
inline void Marker2f::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Marker2f::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Marker2f.length)
}

// float thickness = 11;
inline void Marker2f::clear_thickness() {
  thickness_ = 0;
}
inline float Marker2f::_internal_thickness() const {
  return thickness_;
}
inline float Marker2f::thickness() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.thickness)
  return _internal_thickness();
}
inline void Marker2f::_internal_set_thickness(float value) {
  
  thickness_ = value;
}
inline void Marker2f::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Marker2f.thickness)
}

// float radius = 12;
inline void Marker2f::clear_radius() {
  radius_ = 0;
}
inline float Marker2f::_internal_radius() const {
  return radius_;
}
inline float Marker2f::radius() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2f.radius)
  return _internal_radius();
}
inline void Marker2f::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void Marker2f::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Marker2f.radius)
}

// -------------------------------------------------------------------

// Marker2fArray

// .xviz_msgs.Header header = 1;
inline bool Marker2fArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Marker2fArray::has_header() const {
  return _internal_has_header();
}
inline void Marker2fArray::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Marker2fArray::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Marker2fArray::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2fArray.header)
  return _internal_header();
}
inline void Marker2fArray::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Marker2fArray.header)
}
inline ::xviz_msgs::Header* Marker2fArray::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Marker2fArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Marker2fArray.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Marker2fArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Marker2fArray::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2fArray.header)
  return _msg;
}
inline void Marker2fArray::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Marker2fArray.header)
}

// repeated .xviz_msgs.Marker2f markerArray = 2;
inline int Marker2fArray::_internal_markerarray_size() const {
  return markerarray_.size();
}
inline int Marker2fArray::markerarray_size() const {
  return _internal_markerarray_size();
}
inline void Marker2fArray::clear_markerarray() {
  markerarray_.Clear();
}
inline ::xviz_msgs::Marker2f* Marker2fArray::mutable_markerarray(int index) {
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Marker2fArray.markerArray)
  return markerarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Marker2f >*
Marker2fArray::mutable_markerarray() {
  // @@protoc_insertion_point(field_mutable_list:xviz_msgs.Marker2fArray.markerArray)
  return &markerarray_;
}
inline const ::xviz_msgs::Marker2f& Marker2fArray::_internal_markerarray(int index) const {
  return markerarray_.Get(index);
}
inline const ::xviz_msgs::Marker2f& Marker2fArray::markerarray(int index) const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Marker2fArray.markerArray)
  return _internal_markerarray(index);
}
inline ::xviz_msgs::Marker2f* Marker2fArray::_internal_add_markerarray() {
  return markerarray_.Add();
}
inline ::xviz_msgs::Marker2f* Marker2fArray::add_markerarray() {
  ::xviz_msgs::Marker2f* _add = _internal_add_markerarray();
  // @@protoc_insertion_point(field_add:xviz_msgs.Marker2fArray.markerArray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz_msgs::Marker2f >&
Marker2fArray::markerarray() const {
  // @@protoc_insertion_point(field_list:xviz_msgs.Marker2fArray.markerArray)
  return markerarray_;
}

// -------------------------------------------------------------------

// Transform2fNode

// .xviz_msgs.Header header = 1;
inline bool Transform2fNode::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Transform2fNode::has_header() const {
  return _internal_has_header();
}
inline void Transform2fNode::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::xviz_msgs::Header& Transform2fNode::_internal_header() const {
  const ::xviz_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Header&>(
      ::xviz_msgs::_Header_default_instance_);
}
inline const ::xviz_msgs::Header& Transform2fNode::header() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Transform2fNode.header)
  return _internal_header();
}
inline void Transform2fNode::unsafe_arena_set_allocated_header(
    ::xviz_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Transform2fNode.header)
}
inline ::xviz_msgs::Header* Transform2fNode::release_header() {
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Header* Transform2fNode::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Transform2fNode.header)
  
  ::xviz_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Header* Transform2fNode::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::xviz_msgs::Header* Transform2fNode::mutable_header() {
  ::xviz_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Transform2fNode.header)
  return _msg;
}
inline void Transform2fNode::set_allocated_header(::xviz_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Transform2fNode.header)
}

// .xviz_msgs.Vector2f trans = 2;
inline bool Transform2fNode::_internal_has_trans() const {
  return this != internal_default_instance() && trans_ != nullptr;
}
inline bool Transform2fNode::has_trans() const {
  return _internal_has_trans();
}
inline void Transform2fNode::clear_trans() {
  if (GetArenaForAllocation() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
}
inline const ::xviz_msgs::Vector2f& Transform2fNode::_internal_trans() const {
  const ::xviz_msgs::Vector2f* p = trans_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz_msgs::Vector2f&>(
      ::xviz_msgs::_Vector2f_default_instance_);
}
inline const ::xviz_msgs::Vector2f& Transform2fNode::trans() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Transform2fNode.trans)
  return _internal_trans();
}
inline void Transform2fNode::unsafe_arena_set_allocated_trans(
    ::xviz_msgs::Vector2f* trans) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trans_);
  }
  trans_ = trans;
  if (trans) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz_msgs.Transform2fNode.trans)
}
inline ::xviz_msgs::Vector2f* Transform2fNode::release_trans() {
  
  ::xviz_msgs::Vector2f* temp = trans_;
  trans_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz_msgs::Vector2f* Transform2fNode::unsafe_arena_release_trans() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Transform2fNode.trans)
  
  ::xviz_msgs::Vector2f* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::xviz_msgs::Vector2f* Transform2fNode::_internal_mutable_trans() {
  
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz_msgs::Vector2f>(GetArenaForAllocation());
    trans_ = p;
  }
  return trans_;
}
inline ::xviz_msgs::Vector2f* Transform2fNode::mutable_trans() {
  ::xviz_msgs::Vector2f* _msg = _internal_mutable_trans();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Transform2fNode.trans)
  return _msg;
}
inline void Transform2fNode::set_allocated_trans(::xviz_msgs::Vector2f* trans) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trans_;
  }
  if (trans) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz_msgs::Vector2f>::GetOwningArena(trans);
    if (message_arena != submessage_arena) {
      trans = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    
  } else {
    
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Transform2fNode.trans)
}

// float angle = 3;
inline void Transform2fNode::clear_angle() {
  angle_ = 0;
}
inline float Transform2fNode::_internal_angle() const {
  return angle_;
}
inline float Transform2fNode::angle() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Transform2fNode.angle)
  return _internal_angle();
}
inline void Transform2fNode::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void Transform2fNode::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.Transform2fNode.angle)
}

// string frameId = 4;
inline void Transform2fNode::clear_frameid() {
  frameid_.ClearToEmpty();
}
inline const std::string& Transform2fNode::frameid() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Transform2fNode.frameId)
  return _internal_frameid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transform2fNode::set_frameid(ArgT0&& arg0, ArgT... args) {
 
 frameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz_msgs.Transform2fNode.frameId)
}
inline std::string* Transform2fNode::mutable_frameid() {
  std::string* _s = _internal_mutable_frameid();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Transform2fNode.frameId)
  return _s;
}
inline const std::string& Transform2fNode::_internal_frameid() const {
  return frameid_.Get();
}
inline void Transform2fNode::_internal_set_frameid(const std::string& value) {
  
  frameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transform2fNode::_internal_mutable_frameid() {
  
  return frameid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transform2fNode::release_frameid() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Transform2fNode.frameId)
  return frameid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transform2fNode::set_allocated_frameid(std::string* frameid) {
  if (frameid != nullptr) {
    
  } else {
    
  }
  frameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frameid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    frameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Transform2fNode.frameId)
}

// string parentFrameId = 5;
inline void Transform2fNode::clear_parentframeid() {
  parentframeid_.ClearToEmpty();
}
inline const std::string& Transform2fNode::parentframeid() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.Transform2fNode.parentFrameId)
  return _internal_parentframeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transform2fNode::set_parentframeid(ArgT0&& arg0, ArgT... args) {
 
 parentframeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz_msgs.Transform2fNode.parentFrameId)
}
inline std::string* Transform2fNode::mutable_parentframeid() {
  std::string* _s = _internal_mutable_parentframeid();
  // @@protoc_insertion_point(field_mutable:xviz_msgs.Transform2fNode.parentFrameId)
  return _s;
}
inline const std::string& Transform2fNode::_internal_parentframeid() const {
  return parentframeid_.Get();
}
inline void Transform2fNode::_internal_set_parentframeid(const std::string& value) {
  
  parentframeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transform2fNode::_internal_mutable_parentframeid() {
  
  return parentframeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transform2fNode::release_parentframeid() {
  // @@protoc_insertion_point(field_release:xviz_msgs.Transform2fNode.parentFrameId)
  return parentframeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transform2fNode::set_allocated_parentframeid(std::string* parentframeid) {
  if (parentframeid != nullptr) {
    
  } else {
    
  }
  parentframeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentframeid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parentframeid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parentframeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz_msgs.Transform2fNode.parentFrameId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapDouble

// map<string, double> data = 1;
inline int MapDouble::_internal_data_size() const {
  return data_.size();
}
inline int MapDouble::data_size() const {
  return _internal_data_size();
}
inline void MapDouble::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
MapDouble::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
MapDouble::data() const {
  // @@protoc_insertion_point(field_map:xviz_msgs.MapDouble.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
MapDouble::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
MapDouble::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:xviz_msgs.MapDouble.data)
  return _internal_mutable_data();
}

// double t = 2;
inline void MapDouble::clear_t() {
  t_ = 0;
}
inline double MapDouble::_internal_t() const {
  return t_;
}
inline double MapDouble::t() const {
  // @@protoc_insertion_point(field_get:xviz_msgs.MapDouble.t)
  return _internal_t();
}
inline void MapDouble::_internal_set_t(double value) {
  
  t_ = value;
}
inline void MapDouble::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:xviz_msgs.MapDouble.t)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapString

// map<string, string> data = 1;
inline int MapString::_internal_data_size() const {
  return data_.size();
}
inline int MapString::data_size() const {
  return _internal_data_size();
}
inline void MapString::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MapString::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MapString::data() const {
  // @@protoc_insertion_point(field_map:xviz_msgs.MapString.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MapString::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MapString::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:xviz_msgs.MapString.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xviz_5fmsgs_2eproto
